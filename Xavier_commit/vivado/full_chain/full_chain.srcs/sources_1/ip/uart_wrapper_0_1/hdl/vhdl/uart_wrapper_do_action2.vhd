-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.3
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity uart_wrapper_do_action2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    s_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    s_full_n : IN STD_LOGIC;
    s_write : OUT STD_LOGIC;
    FIFO_O_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    FIFO_O_1_empty_n : IN STD_LOGIC;
    FIFO_O_1_read : OUT STD_LOGIC );
end;


architecture behav of uart_wrapper_do_action2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal s_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal FIFO_O_1_blk_n : STD_LOGIC;
    signal tmp_3_reg_222 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal tmp_5_reg_227 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_reg_232 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_187_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal buffer_fu_183_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state2;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = FIFO_O_1_empty_n) or (ap_const_logic_0 = s_full_n))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_3_reg_222 <= buffer_fu_183_p1(15 downto 8);
                tmp_5_reg_227 <= buffer_fu_183_p1(23 downto 16);
                tmp_7_reg_232 <= buffer_fu_183_p1(31 downto 24);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (s_full_n, FIFO_O_1_empty_n, ap_CS_fsm, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state2 => 
                if ((not(((ap_const_logic_0 = FIFO_O_1_empty_n) or (ap_const_logic_0 = s_full_n))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (s_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (s_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (s_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;

    FIFO_O_1_blk_n_assign_proc : process(FIFO_O_1_empty_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            FIFO_O_1_blk_n <= FIFO_O_1_empty_n;
        else 
            FIFO_O_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    FIFO_O_1_read_assign_proc : process(s_full_n, FIFO_O_1_empty_n, ap_CS_fsm_state2)
    begin
        if ((not(((ap_const_logic_0 = FIFO_O_1_empty_n) or (ap_const_logic_0 = s_full_n))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            FIFO_O_1_read <= ap_const_logic_1;
        else 
            FIFO_O_1_read <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_block_state2_assign_proc : process(s_full_n, FIFO_O_1_empty_n)
    begin
                ap_block_state2 <= ((ap_const_logic_0 = FIFO_O_1_empty_n) or (ap_const_logic_0 = s_full_n));
    end process;

    buffer_fu_183_p1 <= FIFO_O_1_dout;

    s_blk_n_assign_proc : process(s_full_n, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            s_blk_n <= s_full_n;
        else 
            s_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    s_din_assign_proc : process(s_full_n, FIFO_O_1_empty_n, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, tmp_3_reg_222, tmp_5_reg_227, tmp_7_reg_232, tmp_1_fu_187_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (s_full_n = ap_const_logic_1))) then 
            s_din <= tmp_7_reg_232;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (s_full_n = ap_const_logic_1))) then 
            s_din <= tmp_5_reg_227;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (s_full_n = ap_const_logic_1))) then 
            s_din <= tmp_3_reg_222;
        elsif ((not(((ap_const_logic_0 = FIFO_O_1_empty_n) or (ap_const_logic_0 = s_full_n))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            s_din <= tmp_1_fu_187_p1;
        else 
            s_din <= "XXXXXXXX";
        end if; 
    end process;


    s_write_assign_proc : process(s_full_n, FIFO_O_1_empty_n, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state5) and (s_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (s_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (s_full_n = ap_const_logic_1)) or (not(((ap_const_logic_0 = FIFO_O_1_empty_n) or (ap_const_logic_0 = s_full_n))) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            s_write <= ap_const_logic_1;
        else 
            s_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_187_p1 <= buffer_fu_183_p1(8 - 1 downto 0);
end behav;
