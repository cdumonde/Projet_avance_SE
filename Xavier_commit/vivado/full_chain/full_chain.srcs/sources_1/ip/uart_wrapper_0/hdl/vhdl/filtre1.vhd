-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.3
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity filtre1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    clk : IN STD_LOGIC;
    reset : IN STD_LOGIC;
    e_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    e_empty_n : IN STD_LOGIC;
    e_read : OUT STD_LOGIC;
    s_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    s_full_n : IN STD_LOGIC;
    s_write : OUT STD_LOGIC );
end;


architecture behav of filtre1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "filtre1,hls_ip_2017_3,{HLS_INPUT_TYPE=sc,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100tcsg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.608000,HLS_SYN_LAT=12,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=25,HLS_SYN_FF=2070,HLS_SYN_LUT=1718}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal grp_filtre1_do_filtre_fu_64_filtre1_y0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_filtre1_do_filtre_fu_64_filtre1_y0_ap_vld : STD_LOGIC;
    signal grp_filtre1_do_filtre_fu_64_filtre1_x0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_filtre1_do_filtre_fu_64_filtre1_x0_ap_vld : STD_LOGIC;
    signal grp_filtre1_do_filtre_fu_64_filtre1_mem_x_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_filtre1_do_filtre_fu_64_filtre1_mem_x_ce0 : STD_LOGIC;
    signal grp_filtre1_do_filtre_fu_64_filtre1_mem_x_we0 : STD_LOGIC;
    signal grp_filtre1_do_filtre_fu_64_filtre1_mem_x_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_filtre1_do_filtre_fu_64_filtre1_mem_y_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_filtre1_do_filtre_fu_64_filtre1_mem_y_ce0 : STD_LOGIC;
    signal grp_filtre1_do_filtre_fu_64_filtre1_mem_y_we0 : STD_LOGIC;
    signal grp_filtre1_do_filtre_fu_64_filtre1_mem_y_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_filtre1_do_filtre_fu_64_e_read : STD_LOGIC;
    signal grp_filtre1_do_filtre_fu_64_s_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_filtre1_do_filtre_fu_64_s_write : STD_LOGIC;

    component filtre1_do_filtre IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        filtre1_y0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        filtre1_y0_ap_vld : OUT STD_LOGIC;
        filtre1_x0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        filtre1_x0_ap_vld : OUT STD_LOGIC;
        filtre1_mem_x_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        filtre1_mem_x_ce0 : OUT STD_LOGIC;
        filtre1_mem_x_we0 : OUT STD_LOGIC;
        filtre1_mem_x_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        filtre1_mem_y_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        filtre1_mem_y_ce0 : OUT STD_LOGIC;
        filtre1_mem_y_we0 : OUT STD_LOGIC;
        filtre1_mem_y_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        e_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        e_empty_n : IN STD_LOGIC;
        e_read : OUT STD_LOGIC;
        s_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        s_full_n : IN STD_LOGIC;
        s_write : OUT STD_LOGIC );
    end component;


    component filtre1_filtre1_mfYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (0 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    filtre1_mem_x_U : component filtre1_filtre1_mfYi
    generic map (
        DataWidth => 32,
        AddressRange => 1,
        AddressWidth => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_filtre1_do_filtre_fu_64_filtre1_mem_x_address0,
        ce0 => grp_filtre1_do_filtre_fu_64_filtre1_mem_x_ce0,
        we0 => grp_filtre1_do_filtre_fu_64_filtre1_mem_x_we0,
        d0 => grp_filtre1_do_filtre_fu_64_filtre1_mem_x_d0);

    filtre1_mem_y_U : component filtre1_filtre1_mfYi
    generic map (
        DataWidth => 32,
        AddressRange => 1,
        AddressWidth => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_filtre1_do_filtre_fu_64_filtre1_mem_y_address0,
        ce0 => grp_filtre1_do_filtre_fu_64_filtre1_mem_y_ce0,
        we0 => grp_filtre1_do_filtre_fu_64_filtre1_mem_y_we0,
        d0 => grp_filtre1_do_filtre_fu_64_filtre1_mem_y_d0);

    grp_filtre1_do_filtre_fu_64 : component filtre1_do_filtre
    port map (
        ap_clk => clk,
        ap_rst => reset,
        filtre1_y0 => grp_filtre1_do_filtre_fu_64_filtre1_y0,
        filtre1_y0_ap_vld => grp_filtre1_do_filtre_fu_64_filtre1_y0_ap_vld,
        filtre1_x0 => grp_filtre1_do_filtre_fu_64_filtre1_x0,
        filtre1_x0_ap_vld => grp_filtre1_do_filtre_fu_64_filtre1_x0_ap_vld,
        filtre1_mem_x_address0 => grp_filtre1_do_filtre_fu_64_filtre1_mem_x_address0,
        filtre1_mem_x_ce0 => grp_filtre1_do_filtre_fu_64_filtre1_mem_x_ce0,
        filtre1_mem_x_we0 => grp_filtre1_do_filtre_fu_64_filtre1_mem_x_we0,
        filtre1_mem_x_d0 => grp_filtre1_do_filtre_fu_64_filtre1_mem_x_d0,
        filtre1_mem_y_address0 => grp_filtre1_do_filtre_fu_64_filtre1_mem_y_address0,
        filtre1_mem_y_ce0 => grp_filtre1_do_filtre_fu_64_filtre1_mem_y_ce0,
        filtre1_mem_y_we0 => grp_filtre1_do_filtre_fu_64_filtre1_mem_y_we0,
        filtre1_mem_y_d0 => grp_filtre1_do_filtre_fu_64_filtre1_mem_y_d0,
        e_dout => e_dout,
        e_empty_n => e_empty_n,
        e_read => grp_filtre1_do_filtre_fu_64_e_read,
        s_din => grp_filtre1_do_filtre_fu_64_s_din,
        s_full_n => s_full_n,
        s_write => grp_filtre1_do_filtre_fu_64_s_write);




    e_read <= grp_filtre1_do_filtre_fu_64_e_read;
    s_din <= grp_filtre1_do_filtre_fu_64_s_din;
    s_write <= grp_filtre1_do_filtre_fu_64_s_write;
end behav;
