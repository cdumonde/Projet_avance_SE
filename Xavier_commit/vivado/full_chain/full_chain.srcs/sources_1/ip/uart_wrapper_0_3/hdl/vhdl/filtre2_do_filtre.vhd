-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.3
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity filtre2_do_filtre is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    filtre2_y0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    filtre2_y0_ap_vld : OUT STD_LOGIC;
    filtre2_x0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    filtre2_x0_ap_vld : OUT STD_LOGIC;
    filtre2_mem_x_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    filtre2_mem_x_ce0 : OUT STD_LOGIC;
    filtre2_mem_x_we0 : OUT STD_LOGIC;
    filtre2_mem_x_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    filtre2_mem_y_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    filtre2_mem_y_ce0 : OUT STD_LOGIC;
    filtre2_mem_y_we0 : OUT STD_LOGIC;
    filtre2_mem_y_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    e_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    e_empty_n : IN STD_LOGIC;
    e_read : OUT STD_LOGIC;
    s_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    s_full_n : IN STD_LOGIC;
    s_write : OUT STD_LOGIC );
end;


architecture behav of filtre2_do_filtre is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (22 downto 0) := "00000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (22 downto 0) := "00000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (22 downto 0) := "00000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (22 downto 0) := "00000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (22 downto 0) := "00000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (22 downto 0) := "00000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (22 downto 0) := "00001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (22 downto 0) := "00010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (22 downto 0) := "00100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (22 downto 0) := "01000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (22 downto 0) := "10000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv64_3EC0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111011000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_3FEFFC0000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111101111111111000000000000000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal e_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000010";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal s_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal grp_fu_152_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_175 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_fu_164_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_180 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_fu_160_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_186 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal filtre2_mem_x_addr_gep_fu_97_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal filtre2_mem_x_addr_reg_192 : STD_LOGIC_VECTOR (0 downto 0);
    signal filtre2_mem_y_addr_gep_fu_111_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal filtre2_mem_y_addr_reg_197 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_reg_202 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_155_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_reg_209 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_169_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_reg_214 : STD_LOGIC_VECTOR (63 downto 0);
    signal y_fu_148_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_reg_219 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal x1_assign_reg_126 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal y1_assign_reg_137 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal grp_fu_152_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_160_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_160_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_fu_164_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (22 downto 0);

    component filtre1_fptrunc_6eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component filtre1_fpext_32nfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component filtre2_dadd_64nskbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component filtre1_dmul_64nshbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    filtre1_fptrunc_6eOg_U47 : component filtre1_fptrunc_6eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        din0 => reg_186,
        dout => y_fu_148_p1);

    filtre1_fpext_32nfYi_U48 : component filtre1_fpext_32nfYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => grp_fu_152_p0,
        dout => grp_fu_152_p1);

    filtre1_fpext_32nfYi_U49 : component filtre1_fpext_32nfYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => x1_assign_reg_126,
        dout => tmp_2_fu_155_p1);

    filtre2_dadd_64nskbM_U50 : component filtre2_dadd_64nskbM
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_160_p0,
        din1 => grp_fu_160_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_160_p2);

    filtre1_dmul_64nshbi_U51 : component filtre1_dmul_64nshbi
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_175,
        din1 => grp_fu_164_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_164_p2);

    filtre1_dmul_64nshbi_U52 : component filtre1_dmul_64nshbi
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_2_reg_209,
        din1 => ap_const_lv64_3EC0000000000000,
        ce => ap_const_logic_1,
        dout => grp_fu_169_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state2;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    filtre2_mem_x_addr_reg_192_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                
            else
            end if;
        end if;
    end process;


    filtre2_mem_y_addr_reg_197_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                
            else
            end if;
        end if;
    end process;


    x1_assign_reg_126_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x1_assign_reg_126 <= ap_const_lv32_0;
            else
                if (not((ap_const_boolean_1 = ap_const_boolean_1))) then 
                    x1_assign_reg_126 <= ap_const_lv32_0;
                elsif (((s_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                    x1_assign_reg_126 <= val_reg_202;
                end if; 
            end if;
        end if;
    end process;


    y1_assign_reg_137_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                y1_assign_reg_137 <= ap_const_lv32_0;
            else
                if (not((ap_const_boolean_1 = ap_const_boolean_1))) then 
                    y1_assign_reg_137 <= ap_const_lv32_0;
                elsif (((s_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                    y1_assign_reg_137 <= y_reg_219;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state3))) then
                reg_175 <= grp_fu_152_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state9))) then
                reg_180 <= grp_fu_164_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state15))) then
                reg_186 <= grp_fu_160_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                tmp_2_reg_209 <= tmp_2_fu_155_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                tmp_3_reg_214 <= grp_fu_169_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((e_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                val_reg_202 <= e_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                y_reg_219 <= y_fu_148_p1;
            end if;
        end if;
    end process;
    filtre2_mem_x_addr_reg_192(0) <= '0';
    filtre2_mem_y_addr_reg_197(0) <= '0';

    ap_NS_fsm_assign_proc : process (e_empty_n, s_full_n, ap_CS_fsm, ap_CS_fsm_state2, ap_CS_fsm_state23)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state2 => 
                if (((e_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                if (((s_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    e_blk_n_assign_proc : process(e_empty_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            e_blk_n <= e_empty_n;
        else 
            e_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    e_read_assign_proc : process(e_empty_n, ap_CS_fsm_state2)
    begin
        if (((e_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            e_read <= ap_const_logic_1;
        else 
            e_read <= ap_const_logic_0;
        end if; 
    end process;

    filtre2_mem_x_addr_gep_fu_97_p3 <= ap_const_lv64_0(1 - 1 downto 0);

    filtre2_mem_x_address0_assign_proc : process(ap_rst, ap_CS_fsm_state2, filtre2_mem_x_addr_gep_fu_97_p3, filtre2_mem_x_addr_reg_192)
    begin
        if (ap_rst = '1') then
            filtre2_mem_x_address0 <= filtre2_mem_x_addr_gep_fu_97_p3;
        else
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                filtre2_mem_x_address0 <= filtre2_mem_x_addr_reg_192;
            elsif (not((ap_const_boolean_1 = ap_const_boolean_1))) then 
                filtre2_mem_x_address0 <= ap_const_lv64_0(1 - 1 downto 0);
            else 
                filtre2_mem_x_address0 <= "X";
            end if; 
        end if;
    end process;


    filtre2_mem_x_ce0_assign_proc : process(ap_rst, e_empty_n, ap_CS_fsm_state2)
    begin
        if (ap_rst = '1') then
            filtre2_mem_x_ce0 <= ap_const_logic_1;
        else
            if (((e_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                filtre2_mem_x_ce0 <= ap_const_logic_1;
            else 
                filtre2_mem_x_ce0 <= ap_const_logic_0;
            end if; 
        end if;
    end process;


    filtre2_mem_x_d0_assign_proc : process(ap_rst, e_dout, ap_CS_fsm_state2)
    begin
        if (ap_rst = '1') then
            filtre2_mem_x_d0 <= ap_const_lv32_0;
        else
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                filtre2_mem_x_d0 <= e_dout;
            elsif (not((ap_const_boolean_1 = ap_const_boolean_1))) then 
                filtre2_mem_x_d0 <= ap_const_lv32_0;
            else 
                filtre2_mem_x_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if; 
        end if;
    end process;


    filtre2_mem_x_we0_assign_proc : process(ap_rst, e_empty_n, ap_CS_fsm_state2)
    begin
        if (ap_rst = '1') then
            filtre2_mem_x_we0 <= ap_const_logic_1;
        else
            if (((e_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                filtre2_mem_x_we0 <= ap_const_logic_1;
            else 
                filtre2_mem_x_we0 <= ap_const_logic_0;
            end if; 
        end if;
    end process;

    filtre2_mem_y_addr_gep_fu_111_p3 <= ap_const_lv64_0(1 - 1 downto 0);

    filtre2_mem_y_address0_assign_proc : process(ap_rst, filtre2_mem_y_addr_gep_fu_111_p3, filtre2_mem_y_addr_reg_197, ap_CS_fsm_state22)
    begin
        if (ap_rst = '1') then
            filtre2_mem_y_address0 <= filtre2_mem_y_addr_gep_fu_111_p3;
        else
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                filtre2_mem_y_address0 <= filtre2_mem_y_addr_reg_197;
            elsif (not((ap_const_boolean_1 = ap_const_boolean_1))) then 
                filtre2_mem_y_address0 <= ap_const_lv64_0(1 - 1 downto 0);
            else 
                filtre2_mem_y_address0 <= "X";
            end if; 
        end if;
    end process;


    filtre2_mem_y_ce0_assign_proc : process(ap_rst, ap_CS_fsm_state22)
    begin
        if (ap_rst = '1') then
            filtre2_mem_y_ce0 <= ap_const_logic_1;
        else
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                filtre2_mem_y_ce0 <= ap_const_logic_1;
            else 
                filtre2_mem_y_ce0 <= ap_const_logic_0;
            end if; 
        end if;
    end process;


    filtre2_mem_y_d0_assign_proc : process(ap_rst, y_fu_148_p1, ap_CS_fsm_state22)
    begin
        if (ap_rst = '1') then
            filtre2_mem_y_d0 <= ap_const_lv32_0;
        else
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                filtre2_mem_y_d0 <= y_fu_148_p1;
            elsif (not((ap_const_boolean_1 = ap_const_boolean_1))) then 
                filtre2_mem_y_d0 <= ap_const_lv32_0;
            else 
                filtre2_mem_y_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if; 
        end if;
    end process;


    filtre2_mem_y_we0_assign_proc : process(ap_rst, ap_CS_fsm_state22)
    begin
        if (ap_rst = '1') then
            filtre2_mem_y_we0 <= ap_const_logic_1;
        else
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                filtre2_mem_y_we0 <= ap_const_logic_1;
            else 
                filtre2_mem_y_we0 <= ap_const_logic_0;
            end if; 
        end if;
    end process;

    filtre2_x0 <= val_reg_202;

    filtre2_x0_ap_vld_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            filtre2_x0_ap_vld <= ap_const_logic_1;
        else 
            filtre2_x0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    filtre2_y0 <= y_reg_219;

    filtre2_y0_ap_vld_assign_proc : process(s_full_n, ap_CS_fsm_state23)
    begin
        if (((s_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            filtre2_y0_ap_vld <= ap_const_logic_1;
        else 
            filtre2_y0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_152_p0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state9, val_reg_202, y1_assign_reg_137)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_152_p0 <= y1_assign_reg_137;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_152_p0 <= val_reg_202;
        else 
            grp_fu_152_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_160_p0_assign_proc : process(reg_180, reg_186, ap_CS_fsm_state10, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_160_p0 <= reg_186;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_160_p0 <= reg_180;
        else 
            grp_fu_160_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_160_p1_assign_proc : process(reg_180, tmp_3_reg_214, ap_CS_fsm_state10, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_160_p1 <= reg_180;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_160_p1 <= tmp_3_reg_214;
        else 
            grp_fu_160_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_164_p1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_164_p1 <= ap_const_lv64_3FEFFC0000000000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_164_p1 <= ap_const_lv64_3EC0000000000000;
        else 
            grp_fu_164_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    s_blk_n_assign_proc : process(s_full_n, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            s_blk_n <= s_full_n;
        else 
            s_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    s_din <= y_reg_219;

    s_write_assign_proc : process(s_full_n, ap_CS_fsm_state23)
    begin
        if (((s_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            s_write <= ap_const_logic_1;
        else 
            s_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
