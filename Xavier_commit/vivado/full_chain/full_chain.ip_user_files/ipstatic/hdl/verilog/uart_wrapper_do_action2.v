// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.3
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module uart_wrapper_do_action2 (
        ap_clk,
        ap_rst,
        s_din,
        s_full_n,
        s_write,
        FIFO_O_1_dout,
        FIFO_O_1_empty_n,
        FIFO_O_1_read
);

parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
output  [7:0] s_din;
input   s_full_n;
output   s_write;
input  [31:0] FIFO_O_1_dout;
input   FIFO_O_1_empty_n;
output   FIFO_O_1_read;

reg[7:0] s_din;
reg s_write;
reg FIFO_O_1_read;

reg    s_blk_n;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
reg    FIFO_O_1_blk_n;
reg   [7:0] tmp_3_reg_136;
reg    ap_block_state2;
reg   [7:0] tmp_5_reg_141;
reg   [7:0] tmp_7_reg_146;
wire   [7:0] tmp_1_fu_101_p1;
wire   [31:0] buffer_fu_97_p1;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd2;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state2;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == FIFO_O_1_empty_n) | (1'b0 == s_full_n)) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_3_reg_136 <= {{buffer_fu_97_p1[15:8]}};
        tmp_5_reg_141 <= {{buffer_fu_97_p1[23:16]}};
        tmp_7_reg_146 <= {{buffer_fu_97_p1[31:24]}};
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        FIFO_O_1_blk_n = FIFO_O_1_empty_n;
    end else begin
        FIFO_O_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == FIFO_O_1_empty_n) | (1'b0 == s_full_n)) & (1'b1 == ap_CS_fsm_state2))) begin
        FIFO_O_1_read = 1'b1;
    end else begin
        FIFO_O_1_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        s_blk_n = s_full_n;
    end else begin
        s_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (s_full_n == 1'b1))) begin
        s_din = tmp_7_reg_146;
    end else if (((1'b1 == ap_CS_fsm_state4) & (s_full_n == 1'b1))) begin
        s_din = tmp_5_reg_141;
    end else if (((1'b1 == ap_CS_fsm_state3) & (s_full_n == 1'b1))) begin
        s_din = tmp_3_reg_136;
    end else if ((~((1'b0 == FIFO_O_1_empty_n) | (1'b0 == s_full_n)) & (1'b1 == ap_CS_fsm_state2))) begin
        s_din = tmp_1_fu_101_p1;
    end else begin
        s_din = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state5) & (s_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state4) & (s_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state3) & (s_full_n == 1'b1)) | (~((1'b0 == FIFO_O_1_empty_n) | (1'b0 == s_full_n)) & (1'b1 == ap_CS_fsm_state2)))) begin
        s_write = 1'b1;
    end else begin
        s_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state2 : begin
            if ((~((1'b0 == FIFO_O_1_empty_n) | (1'b0 == s_full_n)) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (s_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (s_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (s_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state2 = ((1'b0 == FIFO_O_1_empty_n) | (1'b0 == s_full_n));
end

assign buffer_fu_97_p1 = FIFO_O_1_dout;

assign tmp_1_fu_101_p1 = buffer_fu_97_p1[7:0];

endmodule //uart_wrapper_do_action2
