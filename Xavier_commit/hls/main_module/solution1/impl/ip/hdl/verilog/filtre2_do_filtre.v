// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.3
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module filtre2_do_filtre (
        ap_clk,
        ap_rst,
        filtre2_y0,
        filtre2_y0_ap_vld,
        filtre2_x0,
        filtre2_x0_ap_vld,
        filtre2_mem_x_address0,
        filtre2_mem_x_ce0,
        filtre2_mem_x_we0,
        filtre2_mem_x_d0,
        filtre2_mem_y_address0,
        filtre2_mem_y_ce0,
        filtre2_mem_y_we0,
        filtre2_mem_y_d0,
        e_dout,
        e_empty_n,
        e_read,
        s_din,
        s_full_n,
        s_write
);

parameter    ap_ST_fsm_state2 = 23'd2;
parameter    ap_ST_fsm_state3 = 23'd4;
parameter    ap_ST_fsm_state4 = 23'd8;
parameter    ap_ST_fsm_state5 = 23'd16;
parameter    ap_ST_fsm_state6 = 23'd32;
parameter    ap_ST_fsm_state7 = 23'd64;
parameter    ap_ST_fsm_state8 = 23'd128;
parameter    ap_ST_fsm_state9 = 23'd256;
parameter    ap_ST_fsm_state10 = 23'd512;
parameter    ap_ST_fsm_state11 = 23'd1024;
parameter    ap_ST_fsm_state12 = 23'd2048;
parameter    ap_ST_fsm_state13 = 23'd4096;
parameter    ap_ST_fsm_state14 = 23'd8192;
parameter    ap_ST_fsm_state15 = 23'd16384;
parameter    ap_ST_fsm_state16 = 23'd32768;
parameter    ap_ST_fsm_state17 = 23'd65536;
parameter    ap_ST_fsm_state18 = 23'd131072;
parameter    ap_ST_fsm_state19 = 23'd262144;
parameter    ap_ST_fsm_state20 = 23'd524288;
parameter    ap_ST_fsm_state21 = 23'd1048576;
parameter    ap_ST_fsm_state22 = 23'd2097152;
parameter    ap_ST_fsm_state23 = 23'd4194304;

input   ap_clk;
input   ap_rst;
output  [31:0] filtre2_y0;
output   filtre2_y0_ap_vld;
output  [31:0] filtre2_x0;
output   filtre2_x0_ap_vld;
output  [0:0] filtre2_mem_x_address0;
output   filtre2_mem_x_ce0;
output   filtre2_mem_x_we0;
output  [31:0] filtre2_mem_x_d0;
output  [0:0] filtre2_mem_y_address0;
output   filtre2_mem_y_ce0;
output   filtre2_mem_y_we0;
output  [31:0] filtre2_mem_y_d0;
input  [31:0] e_dout;
input   e_empty_n;
output   e_read;
output  [31:0] s_din;
input   s_full_n;
output   s_write;

reg filtre2_y0_ap_vld;
reg filtre2_x0_ap_vld;
reg[0:0] filtre2_mem_x_address0;
reg filtre2_mem_x_ce0;
reg filtre2_mem_x_we0;
reg[31:0] filtre2_mem_x_d0;
reg[0:0] filtre2_mem_y_address0;
reg filtre2_mem_y_ce0;
reg filtre2_mem_y_we0;
reg[31:0] filtre2_mem_y_d0;
reg e_read;
reg s_write;

reg    e_blk_n;
(* fsm_encoding = "none" *) reg   [22:0] ap_CS_fsm;
wire    ap_CS_fsm_state2;
reg    s_blk_n;
wire    ap_CS_fsm_state23;
wire   [63:0] grp_fu_152_p1;
reg   [63:0] reg_175;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state9;
wire   [63:0] grp_fu_164_p2;
reg   [63:0] reg_180;
wire    ap_CS_fsm_state15;
wire   [63:0] grp_fu_160_p2;
reg   [63:0] reg_186;
wire    ap_CS_fsm_state21;
wire   [0:0] filtre2_mem_x_addr_gep_fu_97_p3;
reg   [0:0] filtre2_mem_x_addr_reg_192;
wire   [0:0] filtre2_mem_y_addr_gep_fu_111_p3;
reg   [0:0] filtre2_mem_y_addr_reg_197;
reg   [31:0] val_reg_202;
wire   [63:0] tmp_2_fu_155_p1;
reg   [63:0] tmp_2_reg_209;
wire   [63:0] grp_fu_169_p2;
reg   [63:0] tmp_3_reg_214;
wire   [31:0] y_fu_148_p1;
reg   [31:0] y_reg_219;
wire    ap_CS_fsm_state22;
reg   [31:0] x1_assign_reg_126;
reg   [31:0] y1_assign_reg_137;
reg   [31:0] grp_fu_152_p0;
reg   [63:0] grp_fu_160_p0;
reg   [63:0] grp_fu_160_p1;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state16;
reg   [63:0] grp_fu_164_p1;
wire    ap_CS_fsm_state4;
reg   [22:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 23'd2;
#0 x1_assign_reg_126 = 32'd0;
#0 y1_assign_reg_137 = 32'd0;
end

filtre1_fptrunc_6eOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
filtre1_fptrunc_6eOg_U47(
    .din0(reg_186),
    .dout(y_fu_148_p1)
);

filtre1_fpext_32nfYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
filtre1_fpext_32nfYi_U48(
    .din0(grp_fu_152_p0),
    .dout(grp_fu_152_p1)
);

filtre1_fpext_32nfYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
filtre1_fpext_32nfYi_U49(
    .din0(x1_assign_reg_126),
    .dout(tmp_2_fu_155_p1)
);

filtre2_dadd_64nskbM #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
filtre2_dadd_64nskbM_U50(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_160_p0),
    .din1(grp_fu_160_p1),
    .ce(1'b1),
    .dout(grp_fu_160_p2)
);

filtre1_dmul_64nshbi #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
filtre1_dmul_64nshbi_U51(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_175),
    .din1(grp_fu_164_p1),
    .ce(1'b1),
    .dout(grp_fu_164_p2)
);

filtre1_dmul_64nshbi #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
filtre1_dmul_64nshbi_U52(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_2_reg_209),
    .din1(64'd4521614025879977984),
    .ce(1'b1),
    .dout(grp_fu_169_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state2;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x1_assign_reg_126 <= 32'd0;
    end else begin
        if (~(1'b1 == 1'b1)) begin
            x1_assign_reg_126 <= 32'd0;
        end else if (((s_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
            x1_assign_reg_126 <= val_reg_202;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        y1_assign_reg_137 <= 32'd0;
    end else begin
        if (~(1'b1 == 1'b1)) begin
            y1_assign_reg_137 <= 32'd0;
        end else if (((s_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
            y1_assign_reg_137 <= y_reg_219;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state3))) begin
        reg_175 <= grp_fu_152_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state9))) begin
        reg_180 <= grp_fu_164_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state15))) begin
        reg_186 <= grp_fu_160_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_2_reg_209 <= tmp_2_fu_155_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_3_reg_214 <= grp_fu_169_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((e_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        val_reg_202 <= e_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        y_reg_219 <= y_fu_148_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        e_blk_n = e_empty_n;
    end else begin
        e_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((e_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        e_read = 1'b1;
    end else begin
        e_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        filtre2_mem_x_address0 = filtre2_mem_x_addr_reg_192;
    end else if (~(1'b1 == 1'b1)) begin
        filtre2_mem_x_address0 = 64'd0;
    end else begin
        filtre2_mem_x_address0 = 'bx;
    end
end
end

always @ (*) begin
    if (((e_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        filtre2_mem_x_ce0 = 1'b1;
    end else begin
        filtre2_mem_x_ce0 = 1'b0;
    end
end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        filtre2_mem_x_d0 = e_dout;
    end else if (~(1'b1 == 1'b1)) begin
        filtre2_mem_x_d0 = 32'd0;
    end else begin
        filtre2_mem_x_d0 = 'bx;
    end
end
end

always @ (*) begin
    if (((e_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        filtre2_mem_x_we0 = 1'b1;
    end else begin
        filtre2_mem_x_we0 = 1'b0;
    end
end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        filtre2_mem_y_address0 = filtre2_mem_y_addr_reg_197;
    end else if (~(1'b1 == 1'b1)) begin
        filtre2_mem_y_address0 = 64'd0;
    end else begin
        filtre2_mem_y_address0 = 'bx;
    end
end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        filtre2_mem_y_ce0 = 1'b1;
    end else begin
        filtre2_mem_y_ce0 = 1'b0;
    end
end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        filtre2_mem_y_d0 = y_fu_148_p1;
    end else if (~(1'b1 == 1'b1)) begin
        filtre2_mem_y_d0 = 32'd0;
    end else begin
        filtre2_mem_y_d0 = 'bx;
    end
end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        filtre2_mem_y_we0 = 1'b1;
    end else begin
        filtre2_mem_y_we0 = 1'b0;
    end
end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        filtre2_x0_ap_vld = 1'b1;
    end else begin
        filtre2_x0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((s_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
        filtre2_y0_ap_vld = 1'b1;
    end else begin
        filtre2_y0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_152_p0 = y1_assign_reg_137;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_152_p0 = val_reg_202;
    end else begin
        grp_fu_152_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_160_p0 = reg_186;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_160_p0 = reg_180;
    end else begin
        grp_fu_160_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_160_p1 = reg_180;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_160_p1 = tmp_3_reg_214;
    end else begin
        grp_fu_160_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_164_p1 = 64'd4607178020753506304;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_164_p1 = 64'd4521614025879977984;
    end else begin
        grp_fu_164_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        s_blk_n = s_full_n;
    end else begin
        s_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((s_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
        s_write = 1'b1;
    end else begin
        s_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state2 : begin
            if (((e_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            if (((s_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign filtre2_mem_x_addr_gep_fu_97_p3 = 64'd0;

assign filtre2_mem_y_addr_gep_fu_111_p3 = 64'd0;

assign filtre2_x0 = val_reg_202;

assign filtre2_y0 = y_reg_219;

assign s_din = y_reg_219;

always @ (posedge ap_clk) begin
    filtre2_mem_x_addr_reg_192 <= 1'b0;
    filtre2_mem_y_addr_reg_197 <= 1'b0;
end

endmodule //filtre2_do_filtre
