// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.3
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module uart_wrapper_do_action1 (
        ap_clk,
        ap_rst,
        e_dout,
        e_empty_n,
        e_read,
        FIFO_I_1_din,
        FIFO_I_1_full_n,
        FIFO_I_1_write
);

parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input  [7:0] e_dout;
input   e_empty_n;
output   e_read;
output  [31:0] FIFO_I_1_din;
input   FIFO_I_1_full_n;
output   FIFO_I_1_write;

reg e_read;
reg FIFO_I_1_write;

reg    e_blk_n;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
reg    FIFO_I_1_blk_n;
reg   [7:0] tmp_reg_185;
reg   [7:0] tmp_4_reg_190;
reg   [7:0] tmp_6_reg_195;
reg    ap_block_state5;
wire   [31:0] buffer_fu_171_p5;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd2;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state2;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (e_empty_n == 1'b1))) begin
        tmp_4_reg_190 <= e_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (e_empty_n == 1'b1))) begin
        tmp_6_reg_195 <= e_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (e_empty_n == 1'b1))) begin
        tmp_reg_185 <= e_dout;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        FIFO_I_1_blk_n = FIFO_I_1_full_n;
    end else begin
        FIFO_I_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == FIFO_I_1_full_n) | (1'b0 == e_empty_n)) & (1'b1 == ap_CS_fsm_state5))) begin
        FIFO_I_1_write = 1'b1;
    end else begin
        FIFO_I_1_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        e_blk_n = e_empty_n;
    end else begin
        e_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((1'b0 == FIFO_I_1_full_n) | (1'b0 == e_empty_n)) & (1'b1 == ap_CS_fsm_state5)) | ((1'b1 == ap_CS_fsm_state4) & (e_empty_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state3) & (e_empty_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state2) & (e_empty_n == 1'b1)))) begin
        e_read = 1'b1;
    end else begin
        e_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (e_empty_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (e_empty_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (e_empty_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if ((~((1'b0 == FIFO_I_1_full_n) | (1'b0 == e_empty_n)) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign FIFO_I_1_din = buffer_fu_171_p5;

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state5 = ((1'b0 == FIFO_I_1_full_n) | (1'b0 == e_empty_n));
end

assign buffer_fu_171_p5 = {{{{e_dout}, {tmp_6_reg_195}}, {tmp_4_reg_190}}, {tmp_reg_185}};

endmodule //uart_wrapper_do_action1
