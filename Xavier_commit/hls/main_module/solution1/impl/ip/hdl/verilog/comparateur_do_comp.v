// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.3
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module comparateur_do_comp (
        ap_clk,
        ap_rst,
        comparateur_in1,
        comparateur_in1_ap_vld,
        comparateur_seuil,
        comparateur_seuil_ap_vld,
        comparateur_result,
        comparateur_result_ap_vld,
        e1_dout,
        e1_empty_n,
        e1_read,
        e2_dout,
        e2_empty_n,
        e2_read,
        s_din,
        s_full_n,
        s_write
);

parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_state9 = 12'd256;
parameter    ap_ST_fsm_state10 = 12'd512;
parameter    ap_ST_fsm_state11 = 12'd1024;
parameter    ap_ST_fsm_state12 = 12'd2048;

input   ap_clk;
input   ap_rst;
output  [31:0] comparateur_in1;
output   comparateur_in1_ap_vld;
output  [31:0] comparateur_seuil;
output   comparateur_seuil_ap_vld;
output  [31:0] comparateur_result;
output   comparateur_result_ap_vld;
input  [31:0] e1_dout;
input   e1_empty_n;
output   e1_read;
input  [31:0] e2_dout;
input   e2_empty_n;
output   e2_read;
output  [31:0] s_din;
input   s_full_n;
output   s_write;

reg comparateur_in1_ap_vld;
reg comparateur_seuil_ap_vld;
reg comparateur_result_ap_vld;
reg e1_read;
reg e2_read;
reg s_write;

reg    e1_blk_n;
(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state2;
reg    e2_blk_n;
reg    s_blk_n;
wire    ap_CS_fsm_state12;
reg   [31:0] val_reg_411;
reg    ap_block_state2;
reg   [31:0] val_1_reg_416;
reg   [0:0] p_Result_s_reg_423;
wire    ap_CS_fsm_state3;
wire   [30:0] p_Val2_6_fu_272_p3;
reg   [30:0] p_Val2_6_reg_428;
wire   [30:0] abs_fu_312_p3;
reg   [30:0] abs_reg_433;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire   [31:0] grp_fu_144_p1;
reg   [31:0] tmp_4_reg_443;
wire    ap_CS_fsm_state10;
wire   [0:0] notlhs_fu_358_p2;
reg   [0:0] notlhs_reg_450;
wire    ap_CS_fsm_state11;
wire   [0:0] notrhs_fu_364_p2;
reg   [0:0] notrhs_reg_455;
wire   [0:0] notlhs3_fu_370_p2;
reg   [0:0] notlhs3_reg_460;
wire   [0:0] notrhs4_fu_376_p2;
reg   [0:0] notrhs4_reg_465;
wire   [0:0] tmp_12_fu_147_p2;
reg   [0:0] tmp_12_reg_470;
wire   [31:0] tmp_5_fu_401_p3;
wire   [31:0] grp_fu_144_p0;
wire   [31:0] p_Val2_s_fu_151_p1;
wire   [22:0] loc_V_2_fu_172_p1;
wire   [24:0] tmp_s_fu_176_p4;
wire   [7:0] loc_V_fu_162_p4;
wire   [8:0] tmp_11_cast1_fu_190_p1;
wire   [8:0] sh_assign_fu_194_p2;
wire   [7:0] tmp_1_fu_208_p2;
wire   [0:0] isNeg_fu_200_p3;
wire  signed [8:0] tmp_12_cast_fu_214_p1;
wire   [8:0] sh_assign_2_fu_218_p3;
wire  signed [31:0] sh_assign_2_cast_fu_226_p1;
wire  signed [24:0] sh_assign_2_cast_cas_fu_230_p1;
wire   [78:0] tmp_10_cast2_fu_186_p1;
wire   [78:0] tmp_2_fu_234_p1;
wire   [24:0] r_V_fu_238_p2;
wire   [0:0] tmp_23_fu_250_p3;
wire   [78:0] r_V_2_fu_244_p2;
wire   [30:0] tmp_6_fu_258_p1;
wire   [30:0] tmp_8_fu_262_p4;
wire   [31:0] result_V_fu_280_p1;
wire   [31:0] result_V_2_fu_283_p2;
wire   [31:0] result_V_5_fu_289_p3;
wire   [30:0] tmp_24_fu_296_p1;
wire   [0:0] abscond_fu_306_p2;
wire   [30:0] neg_cast_fu_300_p2;
wire   [31:0] tmp_30_to_int_fu_324_p1;
wire   [31:0] tmp_15_to_int_fu_341_p1;
wire   [7:0] tmp_3_fu_327_p4;
wire   [22:0] tmp_26_fu_337_p1;
wire   [7:0] tmp_7_fu_344_p4;
wire   [22:0] tmp_27_fu_354_p1;
wire   [0:0] tmp_9_fu_382_p2;
wire   [0:0] tmp_10_fu_386_p2;
wire   [0:0] tmp_11_fu_390_p2;
wire   [0:0] tmp_13_fu_396_p2;
reg   [11:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd2;
end

comparateur_sitofcud #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
comparateur_sitofcud_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_144_p0),
    .ce(1'b1),
    .dout(grp_fu_144_p1)
);

comparateur_fcmp_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
comparateur_fcmp_dEe_U17(
    .din0(val_1_reg_416),
    .din1(tmp_4_reg_443),
    .opcode(5'd5),
    .dout(tmp_12_fu_147_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state2;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        abs_reg_433 <= abs_fu_312_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        notlhs3_reg_460 <= notlhs3_fu_370_p2;
        notlhs_reg_450 <= notlhs_fu_358_p2;
        notrhs4_reg_465 <= notrhs4_fu_376_p2;
        notrhs_reg_455 <= notrhs_fu_364_p2;
        tmp_12_reg_470 <= tmp_12_fu_147_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        p_Result_s_reg_423 <= p_Val2_s_fu_151_p1[32'd31];
        p_Val2_6_reg_428 <= p_Val2_6_fu_272_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_4_reg_443 <= grp_fu_144_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == e2_empty_n) | (1'b0 == e1_empty_n)) & (1'b1 == ap_CS_fsm_state2))) begin
        val_1_reg_416 <= e2_dout;
        val_reg_411 <= e1_dout;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        comparateur_in1_ap_vld = 1'b1;
    end else begin
        comparateur_in1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((s_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        comparateur_result_ap_vld = 1'b1;
    end else begin
        comparateur_result_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        comparateur_seuil_ap_vld = 1'b1;
    end else begin
        comparateur_seuil_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        e1_blk_n = e1_empty_n;
    end else begin
        e1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == e2_empty_n) | (1'b0 == e1_empty_n)) & (1'b1 == ap_CS_fsm_state2))) begin
        e1_read = 1'b1;
    end else begin
        e1_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        e2_blk_n = e2_empty_n;
    end else begin
        e2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == e2_empty_n) | (1'b0 == e1_empty_n)) & (1'b1 == ap_CS_fsm_state2))) begin
        e2_read = 1'b1;
    end else begin
        e2_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        s_blk_n = s_full_n;
    end else begin
        s_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((s_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        s_write = 1'b1;
    end else begin
        s_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state2 : begin
            if ((~((1'b0 == e2_empty_n) | (1'b0 == e1_empty_n)) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((s_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign abs_fu_312_p3 = ((abscond_fu_306_p2[0:0] === 1'b1) ? tmp_24_fu_296_p1 : neg_cast_fu_300_p2);

assign abscond_fu_306_p2 = (($signed(result_V_5_fu_289_p3) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state2 = ((1'b0 == e2_empty_n) | (1'b0 == e1_empty_n));
end

assign comparateur_in1 = tmp_4_reg_443;

assign comparateur_result = tmp_5_fu_401_p3;

assign comparateur_seuil = val_1_reg_416;

assign grp_fu_144_p0 = abs_reg_433;

assign isNeg_fu_200_p3 = sh_assign_fu_194_p2[32'd8];

assign loc_V_2_fu_172_p1 = p_Val2_s_fu_151_p1[22:0];

assign loc_V_fu_162_p4 = {{p_Val2_s_fu_151_p1[30:23]}};

assign neg_cast_fu_300_p2 = (31'd0 - tmp_24_fu_296_p1);

assign notlhs3_fu_370_p2 = ((tmp_7_fu_344_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs_fu_358_p2 = ((tmp_3_fu_327_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs4_fu_376_p2 = ((tmp_27_fu_354_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs_fu_364_p2 = ((tmp_26_fu_337_p1 == 23'd0) ? 1'b1 : 1'b0);

assign p_Val2_6_fu_272_p3 = ((isNeg_fu_200_p3[0:0] === 1'b1) ? tmp_6_fu_258_p1 : tmp_8_fu_262_p4);

assign p_Val2_s_fu_151_p1 = val_reg_411;

assign r_V_2_fu_244_p2 = tmp_10_cast2_fu_186_p1 << tmp_2_fu_234_p1;

assign r_V_fu_238_p2 = tmp_s_fu_176_p4 >> sh_assign_2_cast_cas_fu_230_p1;

assign result_V_2_fu_283_p2 = (32'd0 - result_V_fu_280_p1);

assign result_V_5_fu_289_p3 = ((p_Result_s_reg_423[0:0] === 1'b1) ? result_V_2_fu_283_p2 : result_V_fu_280_p1);

assign result_V_fu_280_p1 = p_Val2_6_reg_428;

assign s_din = tmp_5_fu_401_p3;

assign sh_assign_2_cast_cas_fu_230_p1 = $signed(sh_assign_2_fu_218_p3);

assign sh_assign_2_cast_fu_226_p1 = $signed(sh_assign_2_fu_218_p3);

assign sh_assign_2_fu_218_p3 = ((isNeg_fu_200_p3[0:0] === 1'b1) ? tmp_12_cast_fu_214_p1 : sh_assign_fu_194_p2);

assign sh_assign_fu_194_p2 = ($signed(9'd385) + $signed(tmp_11_cast1_fu_190_p1));

assign tmp_10_cast2_fu_186_p1 = tmp_s_fu_176_p4;

assign tmp_10_fu_386_p2 = (notrhs4_reg_465 | notlhs3_reg_460);

assign tmp_11_cast1_fu_190_p1 = loc_V_fu_162_p4;

assign tmp_11_fu_390_p2 = (tmp_9_fu_382_p2 & tmp_10_fu_386_p2);

assign tmp_12_cast_fu_214_p1 = $signed(tmp_1_fu_208_p2);

assign tmp_13_fu_396_p2 = (tmp_12_reg_470 & tmp_11_fu_390_p2);

assign tmp_15_to_int_fu_341_p1 = tmp_4_reg_443;

assign tmp_1_fu_208_p2 = (8'd127 - loc_V_fu_162_p4);

assign tmp_23_fu_250_p3 = r_V_fu_238_p2[32'd24];

assign tmp_24_fu_296_p1 = result_V_5_fu_289_p3[30:0];

assign tmp_26_fu_337_p1 = tmp_30_to_int_fu_324_p1[22:0];

assign tmp_27_fu_354_p1 = tmp_15_to_int_fu_341_p1[22:0];

assign tmp_2_fu_234_p1 = $unsigned(sh_assign_2_cast_fu_226_p1);

assign tmp_30_to_int_fu_324_p1 = val_1_reg_416;

assign tmp_3_fu_327_p4 = {{tmp_30_to_int_fu_324_p1[30:23]}};

assign tmp_5_fu_401_p3 = ((tmp_13_fu_396_p2[0:0] === 1'b1) ? 32'd1065353216 : 32'd0);

assign tmp_6_fu_258_p1 = tmp_23_fu_250_p3;

assign tmp_7_fu_344_p4 = {{tmp_15_to_int_fu_341_p1[30:23]}};

assign tmp_8_fu_262_p4 = {{r_V_2_fu_244_p2[54:24]}};

assign tmp_9_fu_382_p2 = (notrhs_reg_455 | notlhs_reg_450);

assign tmp_s_fu_176_p4 = {{{{1'd1}, {loc_V_2_fu_172_p1}}}, {1'd0}};

endmodule //comparateur_do_comp
