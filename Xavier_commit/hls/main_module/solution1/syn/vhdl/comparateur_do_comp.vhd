-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.3
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity comparateur_do_comp is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    comparateur_in1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    comparateur_in1_ap_vld : OUT STD_LOGIC;
    comparateur_seuil : OUT STD_LOGIC_VECTOR (31 downto 0);
    comparateur_seuil_ap_vld : OUT STD_LOGIC;
    comparateur_result : OUT STD_LOGIC_VECTOR (31 downto 0);
    comparateur_result_ap_vld : OUT STD_LOGIC;
    e1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    e1_empty_n : IN STD_LOGIC;
    e1_read : OUT STD_LOGIC;
    e2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    e2_empty_n : IN STD_LOGIC;
    e2_read : OUT STD_LOGIC;
    s_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    s_full_n : IN STD_LOGIC;
    s_write : OUT STD_LOGIC );
end;


architecture behav of comparateur_do_comp is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal e1_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal e2_blk_n : STD_LOGIC;
    signal s_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal val_reg_411 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal val_1_reg_416 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_reg_423 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal p_Val2_6_fu_272_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Val2_6_reg_428 : STD_LOGIC_VECTOR (30 downto 0);
    signal abs_fu_312_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal abs_reg_433 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_144_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_reg_443 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal notlhs_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_reg_450 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal notrhs_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs_reg_455 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs3_fu_370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs3_reg_460 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs4_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs4_reg_465 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_147_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_reg_470 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_401_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_144_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_151_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_V_2_fu_172_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_s_fu_176_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal loc_V_fu_162_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_cast1_fu_190_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_fu_194_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_6_fu_208_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_fu_200_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_cast_fu_214_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_2_fu_218_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_2_cast_fu_226_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_2_cast_cas_fu_230_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_15_cast2_fu_186_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_7_fu_234_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal r_V_fu_238_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_27_fu_250_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_2_fu_244_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_3_fu_258_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_4_fu_262_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal result_V_fu_280_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_2_fu_283_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_5_fu_289_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_fu_296_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal abscond_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal neg_cast_fu_300_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_21_to_int_fu_324_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_to_int_fu_341_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_327_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_30_fu_337_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_8_fu_344_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_31_fu_354_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_11_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_390_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);

    component comparateur_sitofcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component comparateur_fcmp_dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    comparateur_sitofcud_U8 : component comparateur_sitofcud
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_144_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_144_p1);

    comparateur_fcmp_dEe_U9 : component comparateur_fcmp_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => val_1_reg_416,
        din1 => tmp_9_reg_443,
        opcode => ap_const_lv5_5,
        dout => tmp_14_fu_147_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state2;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                abs_reg_433 <= abs_fu_312_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                notlhs3_reg_460 <= notlhs3_fu_370_p2;
                notlhs_reg_450 <= notlhs_fu_358_p2;
                notrhs4_reg_465 <= notrhs4_fu_376_p2;
                notrhs_reg_455 <= notrhs_fu_364_p2;
                tmp_14_reg_470 <= tmp_14_fu_147_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                p_Result_s_reg_423 <= p_Val2_s_fu_151_p1(31 downto 31);
                p_Val2_6_reg_428 <= p_Val2_6_fu_272_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                tmp_9_reg_443 <= grp_fu_144_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = e2_empty_n) or (ap_const_logic_0 = e1_empty_n))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                val_1_reg_416 <= e2_dout;
                val_reg_411 <= e1_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (e1_empty_n, e2_empty_n, s_full_n, ap_CS_fsm, ap_CS_fsm_state2, ap_CS_fsm_state12)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state2 => 
                if ((not(((ap_const_logic_0 = e2_empty_n) or (ap_const_logic_0 = e1_empty_n))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((s_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    abs_fu_312_p3 <= 
        tmp_28_fu_296_p1 when (abscond_fu_306_p2(0) = '1') else 
        neg_cast_fu_300_p2;
    abscond_fu_306_p2 <= "1" when (signed(result_V_5_fu_289_p3) > signed(ap_const_lv32_0)) else "0";
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_block_state2_assign_proc : process(e1_empty_n, e2_empty_n)
    begin
                ap_block_state2 <= ((ap_const_logic_0 = e2_empty_n) or (ap_const_logic_0 = e1_empty_n));
    end process;

    comparateur_in1 <= tmp_9_reg_443;

    comparateur_in1_ap_vld_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            comparateur_in1_ap_vld <= ap_const_logic_1;
        else 
            comparateur_in1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    comparateur_result <= tmp_10_fu_401_p3;

    comparateur_result_ap_vld_assign_proc : process(s_full_n, ap_CS_fsm_state12)
    begin
        if (((s_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            comparateur_result_ap_vld <= ap_const_logic_1;
        else 
            comparateur_result_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    comparateur_seuil <= val_1_reg_416;

    comparateur_seuil_ap_vld_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            comparateur_seuil_ap_vld <= ap_const_logic_1;
        else 
            comparateur_seuil_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    e1_blk_n_assign_proc : process(e1_empty_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            e1_blk_n <= e1_empty_n;
        else 
            e1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    e1_read_assign_proc : process(e1_empty_n, e2_empty_n, ap_CS_fsm_state2)
    begin
        if ((not(((ap_const_logic_0 = e2_empty_n) or (ap_const_logic_0 = e1_empty_n))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            e1_read <= ap_const_logic_1;
        else 
            e1_read <= ap_const_logic_0;
        end if; 
    end process;


    e2_blk_n_assign_proc : process(e2_empty_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            e2_blk_n <= e2_empty_n;
        else 
            e2_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    e2_read_assign_proc : process(e1_empty_n, e2_empty_n, ap_CS_fsm_state2)
    begin
        if ((not(((ap_const_logic_0 = e2_empty_n) or (ap_const_logic_0 = e1_empty_n))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            e2_read <= ap_const_logic_1;
        else 
            e2_read <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_144_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(abs_reg_433),32));
    isNeg_fu_200_p3 <= sh_assign_fu_194_p2(8 downto 8);
    loc_V_2_fu_172_p1 <= p_Val2_s_fu_151_p1(23 - 1 downto 0);
    loc_V_fu_162_p4 <= p_Val2_s_fu_151_p1(30 downto 23);
    neg_cast_fu_300_p2 <= std_logic_vector(unsigned(ap_const_lv31_0) - unsigned(tmp_28_fu_296_p1));
    notlhs3_fu_370_p2 <= "0" when (tmp_8_fu_344_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_358_p2 <= "0" when (tmp_5_fu_327_p4 = ap_const_lv8_FF) else "1";
    notrhs4_fu_376_p2 <= "1" when (tmp_31_fu_354_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_364_p2 <= "1" when (tmp_30_fu_337_p1 = ap_const_lv23_0) else "0";
    p_Val2_6_fu_272_p3 <= 
        tmp_3_fu_258_p1 when (isNeg_fu_200_p3(0) = '1') else 
        tmp_4_fu_262_p4;
    p_Val2_s_fu_151_p1 <= val_reg_411;
    r_V_2_fu_244_p2 <= std_logic_vector(shift_left(unsigned(tmp_15_cast2_fu_186_p1),to_integer(unsigned('0' & tmp_7_fu_234_p1(31-1 downto 0)))));
    r_V_fu_238_p2 <= std_logic_vector(shift_right(unsigned(tmp_s_fu_176_p4),to_integer(unsigned('0' & sh_assign_2_cast_cas_fu_230_p1(25-1 downto 0)))));
    result_V_2_fu_283_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(result_V_fu_280_p1));
    result_V_5_fu_289_p3 <= 
        result_V_2_fu_283_p2 when (p_Result_s_reg_423(0) = '1') else 
        result_V_fu_280_p1;
    result_V_fu_280_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_6_reg_428),32));

    s_blk_n_assign_proc : process(s_full_n, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            s_blk_n <= s_full_n;
        else 
            s_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    s_din <= tmp_10_fu_401_p3;

    s_write_assign_proc : process(s_full_n, ap_CS_fsm_state12)
    begin
        if (((s_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            s_write <= ap_const_logic_1;
        else 
            s_write <= ap_const_logic_0;
        end if; 
    end process;

        sh_assign_2_cast_cas_fu_230_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_2_fu_218_p3),25));

        sh_assign_2_cast_fu_226_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_2_fu_218_p3),32));

    sh_assign_2_fu_218_p3 <= 
        tmp_17_cast_fu_214_p1 when (isNeg_fu_200_p3(0) = '1') else 
        sh_assign_fu_194_p2;
    sh_assign_fu_194_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_16_cast1_fu_190_p1));
    tmp_10_fu_401_p3 <= 
        ap_const_lv32_3F800000 when (tmp_15_fu_396_p2(0) = '1') else 
        ap_const_lv32_0;
    tmp_11_fu_382_p2 <= (notrhs_reg_455 or notlhs_reg_450);
    tmp_12_fu_386_p2 <= (notrhs4_reg_465 or notlhs3_reg_460);
    tmp_13_fu_390_p2 <= (tmp_12_fu_386_p2 and tmp_11_fu_382_p2);
    tmp_15_cast2_fu_186_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_176_p4),79));
    tmp_15_fu_396_p2 <= (tmp_14_reg_470 and tmp_13_fu_390_p2);
    tmp_16_cast1_fu_190_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_V_fu_162_p4),9));
        tmp_17_cast_fu_214_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_6_fu_208_p2),9));

    tmp_20_to_int_fu_341_p1 <= tmp_9_reg_443;
    tmp_21_to_int_fu_324_p1 <= val_1_reg_416;
    tmp_27_fu_250_p3 <= r_V_fu_238_p2(24 downto 24);
    tmp_28_fu_296_p1 <= result_V_5_fu_289_p3(31 - 1 downto 0);
    tmp_30_fu_337_p1 <= tmp_21_to_int_fu_324_p1(23 - 1 downto 0);
    tmp_31_fu_354_p1 <= tmp_20_to_int_fu_341_p1(23 - 1 downto 0);
    tmp_3_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_27_fu_250_p3),31));
    tmp_4_fu_262_p4 <= r_V_2_fu_244_p2(54 downto 24);
    tmp_5_fu_327_p4 <= tmp_21_to_int_fu_324_p1(30 downto 23);
    tmp_6_fu_208_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(loc_V_fu_162_p4));
    tmp_7_fu_234_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_2_cast_fu_226_p1),79));
    tmp_8_fu_344_p4 <= tmp_20_to_int_fu_341_p1(30 downto 23);
    tmp_s_fu_176_p4 <= ((ap_const_lv1_1 & loc_V_2_fu_172_p1) & ap_const_lv1_0);
end behav;
