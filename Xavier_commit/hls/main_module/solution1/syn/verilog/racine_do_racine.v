// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.3
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module racine_do_racine (
        ap_clk,
        ap_rst,
        racine_x,
        racine_x_ap_vld,
        e_dout,
        e_empty_n,
        e_read,
        s_din,
        s_full_n,
        s_write
);

parameter    ap_ST_fsm_state2 = 27'd2;
parameter    ap_ST_fsm_state3 = 27'd4;
parameter    ap_ST_fsm_state4 = 27'd8;
parameter    ap_ST_fsm_state5 = 27'd16;
parameter    ap_ST_fsm_state6 = 27'd32;
parameter    ap_ST_fsm_state7 = 27'd64;
parameter    ap_ST_fsm_state8 = 27'd128;
parameter    ap_ST_fsm_state9 = 27'd256;
parameter    ap_ST_fsm_state10 = 27'd512;
parameter    ap_ST_fsm_state11 = 27'd1024;
parameter    ap_ST_fsm_state12 = 27'd2048;
parameter    ap_ST_fsm_state13 = 27'd4096;
parameter    ap_ST_fsm_state14 = 27'd8192;
parameter    ap_ST_fsm_state15 = 27'd16384;
parameter    ap_ST_fsm_state16 = 27'd32768;
parameter    ap_ST_fsm_state17 = 27'd65536;
parameter    ap_ST_fsm_state18 = 27'd131072;
parameter    ap_ST_fsm_state19 = 27'd262144;
parameter    ap_ST_fsm_state20 = 27'd524288;
parameter    ap_ST_fsm_state21 = 27'd1048576;
parameter    ap_ST_fsm_state22 = 27'd2097152;
parameter    ap_ST_fsm_state23 = 27'd4194304;
parameter    ap_ST_fsm_state24 = 27'd8388608;
parameter    ap_ST_fsm_state25 = 27'd16777216;
parameter    ap_ST_fsm_state26 = 27'd33554432;
parameter    ap_ST_fsm_state27 = 27'd67108864;

input   ap_clk;
input   ap_rst;
output  [31:0] racine_x;
output   racine_x_ap_vld;
input  [31:0] e_dout;
input   e_empty_n;
output   e_read;
output  [31:0] s_din;
input   s_full_n;
output   s_write;

reg racine_x_ap_vld;
reg e_read;
reg s_write;

reg    e_blk_n;
(* fsm_encoding = "none" *) reg   [26:0] ap_CS_fsm;
wire    ap_CS_fsm_state2;
reg    s_blk_n;
wire    ap_CS_fsm_state27;
reg   [31:0] val_reg_300;
reg   [0:0] p_Result_s_reg_305;
wire    ap_CS_fsm_state3;
wire   [30:0] p_Val2_2_fu_248_p3;
reg   [30:0] p_Val2_2_reg_310;
wire   [30:0] abs_fu_288_p3;
reg   [30:0] abs_reg_315;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire   [31:0] grp_fu_119_p1;
reg   [31:0] tmp_6_reg_325;
wire    ap_CS_fsm_state10;
wire   [31:0] grp_fu_122_p2;
reg   [31:0] tmp_7_reg_330;
wire    ap_CS_fsm_state22;
wire   [31:0] grp_fu_114_p2;
reg   [31:0] tmp_8_reg_336;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state23;
wire   [31:0] grp_fu_119_p0;
wire    ap_CS_fsm_state11;
wire   [31:0] p_Val2_s_fu_127_p1;
wire   [22:0] loc_V_1_fu_148_p1;
wire   [24:0] tmp_1_fu_152_p4;
wire   [7:0] loc_V_fu_138_p4;
wire   [8:0] tmp_2_cast1_fu_166_p1;
wire   [8:0] sh_assign_fu_170_p2;
wire   [7:0] tmp_3_fu_184_p2;
wire   [0:0] isNeg_fu_176_p3;
wire  signed [8:0] tmp_3_cast_fu_190_p1;
wire   [8:0] sh_assign_1_fu_194_p3;
wire  signed [31:0] sh_assign_1_cast_fu_202_p1;
wire  signed [24:0] sh_assign_1_cast_cas_fu_206_p1;
wire   [78:0] tmp_1_cast2_fu_162_p1;
wire   [78:0] tmp_4_fu_210_p1;
wire   [24:0] r_V_fu_214_p2;
wire   [0:0] tmp_15_fu_226_p3;
wire   [78:0] r_V_1_fu_220_p2;
wire   [30:0] tmp_s_fu_234_p1;
wire   [30:0] tmp_2_fu_238_p4;
wire   [31:0] result_V_fu_256_p1;
wire   [31:0] result_V_1_fu_259_p2;
wire   [31:0] result_V_3_fu_265_p3;
wire   [30:0] tmp_16_fu_272_p1;
wire   [0:0] abscond_fu_282_p2;
wire   [30:0] neg_cast_fu_276_p2;
reg   [26:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 27'd2;
end

carre_fmul_32ns_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
carre_fmul_32ns_3bkb_U63(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_7_reg_330),
    .din1(32'd1118699520),
    .ce(1'b1),
    .dout(grp_fu_114_p2)
);

comparateur_sitofcud #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
comparateur_sitofcud_U64(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_119_p0),
    .ce(1'b1),
    .dout(grp_fu_119_p1)
);

racine_fsqrt_32nsncg #(
    .ID( 1 ),
    .NUM_STAGE( 12 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
racine_fsqrt_32nsncg_U65(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd0),
    .din1(tmp_6_reg_325),
    .ce(1'b1),
    .dout(grp_fu_122_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state2;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        abs_reg_315 <= abs_fu_288_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        p_Result_s_reg_305 <= p_Val2_s_fu_127_p1[32'd31];
        p_Val2_2_reg_310 <= p_Val2_2_fu_248_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_6_reg_325 <= grp_fu_119_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        tmp_7_reg_330 <= grp_fu_122_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        tmp_8_reg_336 <= grp_fu_114_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((e_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        val_reg_300 <= e_dout;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        e_blk_n = e_empty_n;
    end else begin
        e_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((e_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        e_read = 1'b1;
    end else begin
        e_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        racine_x_ap_vld = 1'b1;
    end else begin
        racine_x_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        s_blk_n = s_full_n;
    end else begin
        s_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((s_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state27))) begin
        s_write = 1'b1;
    end else begin
        s_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state2 : begin
            if (((e_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            if (((s_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state27))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign abs_fu_288_p3 = ((abscond_fu_282_p2[0:0] === 1'b1) ? tmp_16_fu_272_p1 : neg_cast_fu_276_p2);

assign abscond_fu_282_p2 = (($signed(result_V_3_fu_265_p3) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign grp_fu_119_p0 = abs_reg_315;

assign isNeg_fu_176_p3 = sh_assign_fu_170_p2[32'd8];

assign loc_V_1_fu_148_p1 = p_Val2_s_fu_127_p1[22:0];

assign loc_V_fu_138_p4 = {{p_Val2_s_fu_127_p1[30:23]}};

assign neg_cast_fu_276_p2 = (31'd0 - tmp_16_fu_272_p1);

assign p_Val2_2_fu_248_p3 = ((isNeg_fu_176_p3[0:0] === 1'b1) ? tmp_s_fu_234_p1 : tmp_2_fu_238_p4);

assign p_Val2_s_fu_127_p1 = val_reg_300;

assign r_V_1_fu_220_p2 = tmp_1_cast2_fu_162_p1 << tmp_4_fu_210_p1;

assign r_V_fu_214_p2 = tmp_1_fu_152_p4 >> sh_assign_1_cast_cas_fu_206_p1;

assign racine_x = tmp_7_reg_330;

assign result_V_1_fu_259_p2 = (32'd0 - result_V_fu_256_p1);

assign result_V_3_fu_265_p3 = ((p_Result_s_reg_305[0:0] === 1'b1) ? result_V_1_fu_259_p2 : result_V_fu_256_p1);

assign result_V_fu_256_p1 = p_Val2_2_reg_310;

assign s_din = tmp_8_reg_336;

assign sh_assign_1_cast_cas_fu_206_p1 = $signed(sh_assign_1_fu_194_p3);

assign sh_assign_1_cast_fu_202_p1 = $signed(sh_assign_1_fu_194_p3);

assign sh_assign_1_fu_194_p3 = ((isNeg_fu_176_p3[0:0] === 1'b1) ? tmp_3_cast_fu_190_p1 : sh_assign_fu_170_p2);

assign sh_assign_fu_170_p2 = ($signed(9'd385) + $signed(tmp_2_cast1_fu_166_p1));

assign tmp_15_fu_226_p3 = r_V_fu_214_p2[32'd24];

assign tmp_16_fu_272_p1 = result_V_3_fu_265_p3[30:0];

assign tmp_1_cast2_fu_162_p1 = tmp_1_fu_152_p4;

assign tmp_1_fu_152_p4 = {{{{1'd1}, {loc_V_1_fu_148_p1}}}, {1'd0}};

assign tmp_2_cast1_fu_166_p1 = loc_V_fu_138_p4;

assign tmp_2_fu_238_p4 = {{r_V_1_fu_220_p2[54:24]}};

assign tmp_3_cast_fu_190_p1 = $signed(tmp_3_fu_184_p2);

assign tmp_3_fu_184_p2 = (8'd127 - loc_V_fu_138_p4);

assign tmp_4_fu_210_p1 = $unsigned(sh_assign_1_cast_fu_202_p1);

assign tmp_s_fu_234_p1 = tmp_15_fu_226_p3;

endmodule //racine_do_racine
