// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.3
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _carre_do_carre_HH_
#define _carre_do_carre_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "carre_fmul_32ns_3bkb.h"

namespace ap_rtl {

struct carre_do_carre : public sc_module {
    // Port declarations 10
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_out< sc_lv<32> > carre_x;
    sc_out< sc_logic > carre_x_ap_vld;
    sc_in< sc_lv<32> > e_dout;
    sc_in< sc_logic > e_empty_n;
    sc_out< sc_logic > e_read;
    sc_out< sc_lv<32> > s_din;
    sc_in< sc_logic > s_full_n;
    sc_out< sc_logic > s_write;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    carre_do_carre(sc_module_name name);
    SC_HAS_PROCESS(carre_do_carre);

    ~carre_do_carre();

    sc_trace_file* mVcdFile;

    carre_fmul_32ns_3bkb<1,4,32,32,32>* carre_fmul_32ns_3bkb_U9;
    sc_signal< sc_logic > e_blk_n;
    sc_signal< sc_lv<7> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > s_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<32> > val_reg_80;
    sc_signal< sc_lv<32> > grp_fu_76_p2;
    sc_signal< sc_lv<32> > tmp_6_reg_86;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<7> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<7> ap_ST_fsm_state2;
    static const sc_lv<7> ap_ST_fsm_state3;
    static const sc_lv<7> ap_ST_fsm_state4;
    static const sc_lv<7> ap_ST_fsm_state5;
    static const sc_lv<7> ap_ST_fsm_state6;
    static const sc_lv<7> ap_ST_fsm_state7;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_carre_x();
    void thread_carre_x_ap_vld();
    void thread_e_blk_n();
    void thread_e_read();
    void thread_s_blk_n();
    void thread_s_din();
    void thread_s_write();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
