//RTL Wrapper auto-generated by Vivado HLS.
#include "top_level.h"


#include "AESL_TLM_FIFO_transactor.h"
SC_MODULE(top_level_rtl_wrapper) {

    //ESL interface.

    sc_in<bool > clk;

    sc_in<bool > reset;

    sc_fifo_in<unsigned char > e;

    sc_fifo_out<unsigned char > s;

    //RTL interface signals.


    sc_signal<sc_logic > rtl_reset;

    sc_signal<sc_lv<8> > e_dout;

    sc_signal<sc_logic > e_read;

    sc_signal<sc_logic > e_empty_n;

    sc_signal<unsigned char > e_dout_t;

    sc_signal<sc_lv<8> > s_din;

    sc_signal<sc_logic > s_write;

    sc_signal<sc_logic > s_full_n;

    sc_signal<unsigned char > s_din_t;


top_level* top_level_inst;

    SC_CTOR(top_level_rtl_wrapper) { 

        top_level_inst = new top_level("top_level_rtl_inst");


        initInstances(top_level_inst);

        SC_METHOD(signal_connection);

        sensitive<<clk<<reset<<e_dout_t<<s_din;

    }

    ~top_level_rtl_wrapper() {

    delete top_level_inst;

    }

    void initInstances(top_level * top_level_inst) {

        //The RTL model.

        
        SC_FIFO_in_transactor<0, unsigned char >* e_inFifo_tr =  new SC_FIFO_in_transactor<0, unsigned char >("e_inFifo_tr", AESL_ResetType::active_high_sync);

        SC_FIFO_out_transactor<0, unsigned char >* s_outFifo_tr =  new SC_FIFO_out_transactor<0, unsigned char >("s_outFifo_tr", AESL_ResetType::active_high_sync);

        top_level_inst->clk(clk);

        top_level_inst->reset(rtl_reset);

        e_inFifo_tr->rst(rtl_reset);

        s_outFifo_tr->rst(rtl_reset);

        e_inFifo_tr->FifoIn(e);

        e_inFifo_tr->clock(clk);

        e_inFifo_tr->if_empty_n(e_empty_n);

        e_inFifo_tr->if_read(e_read);

        e_inFifo_tr->if_dout(e_dout_t);

        top_level_inst->e_empty_n(e_empty_n);

        top_level_inst->e_read(e_read);

        top_level_inst->e_dout(e_dout);

        s_outFifo_tr->FifoOut(s);

        s_outFifo_tr->clock(clk);

        s_outFifo_tr->if_full_n(s_full_n);

        s_outFifo_tr->if_write(s_write);

        s_outFifo_tr->if_din(s_din_t);

        top_level_inst->s_full_n(s_full_n);

        top_level_inst->s_write(s_write);

        top_level_inst->s_din(s_din);

    }


    void signal_connection() {


        rtl_reset.write((sc_logic)(reset.read()));

        e_dout.write((sc_int<8>)(e_dout_t.read()));

        
        s_din_t.write(s_din.read().to_uint64());


    }

};
