// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.3
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "doubleur.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic doubleur::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic doubleur::ap_const_logic_0 = sc_dt::Log_0;
const bool doubleur::ap_const_boolean_1 = true;

doubleur::doubleur(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_doubleur_do_split_fu_62 = new doubleur_do_split("grp_doubleur_do_split_fu_62");
    grp_doubleur_do_split_fu_62->ap_clk(clk);
    grp_doubleur_do_split_fu_62->ap_rst(reset);
    grp_doubleur_do_split_fu_62->doubleur_to_split(grp_doubleur_do_split_fu_62_doubleur_to_split);
    grp_doubleur_do_split_fu_62->doubleur_to_split_ap_vld(grp_doubleur_do_split_fu_62_doubleur_to_split_ap_vld);
    grp_doubleur_do_split_fu_62->e_dout(e_dout);
    grp_doubleur_do_split_fu_62->e_empty_n(e_empty_n);
    grp_doubleur_do_split_fu_62->e_read(grp_doubleur_do_split_fu_62_e_read);
    grp_doubleur_do_split_fu_62->s1_din(grp_doubleur_do_split_fu_62_s1_din);
    grp_doubleur_do_split_fu_62->s1_full_n(s1_full_n);
    grp_doubleur_do_split_fu_62->s1_write(grp_doubleur_do_split_fu_62_s1_write);
    grp_doubleur_do_split_fu_62->s2_din(grp_doubleur_do_split_fu_62_s2_din);
    grp_doubleur_do_split_fu_62->s2_full_n(s2_full_n);
    grp_doubleur_do_split_fu_62->s2_write(grp_doubleur_do_split_fu_62_s2_write);

    SC_METHOD(thread_e_read);
    sensitive << ( grp_doubleur_do_split_fu_62_e_read );

    SC_METHOD(thread_s1_din);
    sensitive << ( grp_doubleur_do_split_fu_62_s1_din );
    sensitive << ( grp_doubleur_do_split_fu_62_s1_write );

    SC_METHOD(thread_s1_write);
    sensitive << ( grp_doubleur_do_split_fu_62_s1_write );

    SC_METHOD(thread_s2_din);
    sensitive << ( grp_doubleur_do_split_fu_62_s2_din );
    sensitive << ( grp_doubleur_do_split_fu_62_s2_write );

    SC_METHOD(thread_s2_write);
    sensitive << ( grp_doubleur_do_split_fu_62_s2_write );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "doubleur_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, clk, "(port)clk");
    sc_trace(mVcdFile, reset, "(port)reset");
    sc_trace(mVcdFile, e_dout, "(port)e_dout");
    sc_trace(mVcdFile, e_empty_n, "(port)e_empty_n");
    sc_trace(mVcdFile, e_read, "(port)e_read");
    sc_trace(mVcdFile, s1_din, "(port)s1_din");
    sc_trace(mVcdFile, s1_full_n, "(port)s1_full_n");
    sc_trace(mVcdFile, s1_write, "(port)s1_write");
    sc_trace(mVcdFile, s2_din, "(port)s2_din");
    sc_trace(mVcdFile, s2_full_n, "(port)s2_full_n");
    sc_trace(mVcdFile, s2_write, "(port)s2_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, grp_doubleur_do_split_fu_62_doubleur_to_split, "grp_doubleur_do_split_fu_62_doubleur_to_split");
    sc_trace(mVcdFile, grp_doubleur_do_split_fu_62_doubleur_to_split_ap_vld, "grp_doubleur_do_split_fu_62_doubleur_to_split_ap_vld");
    sc_trace(mVcdFile, grp_doubleur_do_split_fu_62_e_read, "grp_doubleur_do_split_fu_62_e_read");
    sc_trace(mVcdFile, grp_doubleur_do_split_fu_62_s1_din, "grp_doubleur_do_split_fu_62_s1_din");
    sc_trace(mVcdFile, grp_doubleur_do_split_fu_62_s1_write, "grp_doubleur_do_split_fu_62_s1_write");
    sc_trace(mVcdFile, grp_doubleur_do_split_fu_62_s2_din, "grp_doubleur_do_split_fu_62_s2_din");
    sc_trace(mVcdFile, grp_doubleur_do_split_fu_62_s2_write, "grp_doubleur_do_split_fu_62_s2_write");
#endif

    }
}

doubleur::~doubleur() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete grp_doubleur_do_split_fu_62;
}

void doubleur::thread_e_read() {
    e_read = grp_doubleur_do_split_fu_62_e_read.read();
}

void doubleur::thread_s1_din() {
    s1_din = grp_doubleur_do_split_fu_62_s1_din.read();
}

void doubleur::thread_s1_write() {
    s1_write = grp_doubleur_do_split_fu_62_s1_write.read();
}

void doubleur::thread_s2_din() {
    s2_din = grp_doubleur_do_split_fu_62_s2_din.read();
}

void doubleur::thread_s2_write() {
    s2_write = grp_doubleur_do_split_fu_62_s2_write.read();
}

}

