// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.3
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "oled_process.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic oled_process::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic oled_process::ap_const_logic_0 = sc_dt::Log_0;
const bool oled_process::ap_const_boolean_1 = true;

oled_process::oled_process(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_oled_process_do_oled_process_fu_70 = new oled_process_do_oled_process("grp_oled_process_do_oled_process_fu_70");
    grp_oled_process_do_oled_process_fu_70->ap_clk(clk);
    grp_oled_process_do_oled_process_fu_70->ap_rst(reset);
    grp_oled_process_do_oled_process_fu_70->oled_process_sum(grp_oled_process_do_oled_process_fu_70_oled_process_sum);
    grp_oled_process_do_oled_process_fu_70->oled_process_sum_ap_vld(grp_oled_process_do_oled_process_fu_70_oled_process_sum_ap_vld);
    grp_oled_process_do_oled_process_fu_70->oled_process_save(grp_oled_process_do_oled_process_fu_70_oled_process_save);
    grp_oled_process_do_oled_process_fu_70->oled_process_save_ap_vld(grp_oled_process_do_oled_process_fu_70_oled_process_save_ap_vld);
    grp_oled_process_do_oled_process_fu_70->en(grp_oled_process_do_oled_process_fu_70_en);
    grp_oled_process_do_oled_process_fu_70->en_ap_vld(grp_oled_process_do_oled_process_fu_70_en_ap_vld);
    grp_oled_process_do_oled_process_fu_70->s(grp_oled_process_do_oled_process_fu_70_s);
    grp_oled_process_do_oled_process_fu_70->s_ap_vld(grp_oled_process_do_oled_process_fu_70_s_ap_vld);
    grp_oled_process_do_oled_process_fu_70->e_dout(e_dout);
    grp_oled_process_do_oled_process_fu_70->e_empty_n(e_empty_n);
    grp_oled_process_do_oled_process_fu_70->e_read(grp_oled_process_do_oled_process_fu_70_e_read);
    grp_oled_process_do_oled_process_fu_70->s_f_din(grp_oled_process_do_oled_process_fu_70_s_f_din);
    grp_oled_process_do_oled_process_fu_70->s_f_full_n(s_f_full_n);
    grp_oled_process_do_oled_process_fu_70->s_f_write(grp_oled_process_do_oled_process_fu_70_s_f_write);

    SC_METHOD(thread_en);
    dont_initialize();
    sensitive << ( clk.pos() );

    SC_METHOD(thread_s);
    dont_initialize();
    sensitive << ( clk.pos() );

    SC_METHOD(thread_e_read);
    sensitive << ( grp_oled_process_do_oled_process_fu_70_e_read );

    SC_METHOD(thread_s_f_din);
    sensitive << ( grp_oled_process_do_oled_process_fu_70_s_f_din );
    sensitive << ( grp_oled_process_do_oled_process_fu_70_s_f_write );

    SC_METHOD(thread_s_f_write);
    sensitive << ( grp_oled_process_do_oled_process_fu_70_s_f_write );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "oled_process_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, clk, "(port)clk");
    sc_trace(mVcdFile, reset, "(port)reset");
    sc_trace(mVcdFile, en, "(port)en");
    sc_trace(mVcdFile, s, "(port)s");
    sc_trace(mVcdFile, e_dout, "(port)e_dout");
    sc_trace(mVcdFile, e_empty_n, "(port)e_empty_n");
    sc_trace(mVcdFile, e_read, "(port)e_read");
    sc_trace(mVcdFile, s_f_din, "(port)s_f_din");
    sc_trace(mVcdFile, s_f_full_n, "(port)s_f_full_n");
    sc_trace(mVcdFile, s_f_write, "(port)s_f_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, grp_oled_process_do_oled_process_fu_70_oled_process_sum, "grp_oled_process_do_oled_process_fu_70_oled_process_sum");
    sc_trace(mVcdFile, grp_oled_process_do_oled_process_fu_70_oled_process_sum_ap_vld, "grp_oled_process_do_oled_process_fu_70_oled_process_sum_ap_vld");
    sc_trace(mVcdFile, grp_oled_process_do_oled_process_fu_70_oled_process_save, "grp_oled_process_do_oled_process_fu_70_oled_process_save");
    sc_trace(mVcdFile, grp_oled_process_do_oled_process_fu_70_oled_process_save_ap_vld, "grp_oled_process_do_oled_process_fu_70_oled_process_save_ap_vld");
    sc_trace(mVcdFile, grp_oled_process_do_oled_process_fu_70_en, "grp_oled_process_do_oled_process_fu_70_en");
    sc_trace(mVcdFile, grp_oled_process_do_oled_process_fu_70_en_ap_vld, "grp_oled_process_do_oled_process_fu_70_en_ap_vld");
    sc_trace(mVcdFile, grp_oled_process_do_oled_process_fu_70_s, "grp_oled_process_do_oled_process_fu_70_s");
    sc_trace(mVcdFile, grp_oled_process_do_oled_process_fu_70_s_ap_vld, "grp_oled_process_do_oled_process_fu_70_s_ap_vld");
    sc_trace(mVcdFile, grp_oled_process_do_oled_process_fu_70_e_read, "grp_oled_process_do_oled_process_fu_70_e_read");
    sc_trace(mVcdFile, grp_oled_process_do_oled_process_fu_70_s_f_din, "grp_oled_process_do_oled_process_fu_70_s_f_din");
    sc_trace(mVcdFile, grp_oled_process_do_oled_process_fu_70_s_f_write, "grp_oled_process_do_oled_process_fu_70_s_f_write");
#endif

    }
}

oled_process::~oled_process() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete grp_oled_process_do_oled_process_fu_70;
}

void oled_process::thread_en() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, grp_oled_process_do_oled_process_fu_70_en_ap_vld.read())) {
        en = grp_oled_process_do_oled_process_fu_70_en.read();
    }
}

void oled_process::thread_s() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, grp_oled_process_do_oled_process_fu_70_s_ap_vld.read())) {
        s = grp_oled_process_do_oled_process_fu_70_s.read();
    }
}

void oled_process::thread_e_read() {
    e_read = grp_oled_process_do_oled_process_fu_70_e_read.read();
}

void oled_process::thread_s_f_din() {
    s_f_din = grp_oled_process_do_oled_process_fu_70_s_f_din.read();
}

void oled_process::thread_s_f_write() {
    s_f_write = grp_oled_process_do_oled_process_fu_70_s_f_write.read();
}

}

