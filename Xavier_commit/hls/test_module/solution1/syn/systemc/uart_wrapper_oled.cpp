// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.3
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "uart_wrapper_oled.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic uart_wrapper_oled::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic uart_wrapper_oled::ap_const_logic_0 = sc_dt::Log_0;
const bool uart_wrapper_oled::ap_const_boolean_1 = true;

uart_wrapper_oled::uart_wrapper_oled(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_oled_process_fu_106 = new oled_process("grp_oled_process_fu_106");
    grp_oled_process_fu_106->en(grp_oled_process_fu_106_en);
    grp_oled_process_fu_106->s(grp_oled_process_fu_106_s);
    grp_oled_process_fu_106->e_dout(FIFO_I_1_dout);
    grp_oled_process_fu_106->e_empty_n(FIFO_I_1_empty_n);
    grp_oled_process_fu_106->e_read(grp_oled_process_fu_106_e_read);
    grp_oled_process_fu_106->s_f_din(grp_oled_process_fu_106_s_f_din);
    grp_oled_process_fu_106->s_f_full_n(FIFO_O_1_full_n);
    grp_oled_process_fu_106->s_f_write(grp_oled_process_fu_106_s_f_write);
    grp_oled_process_fu_106->clk(clk);
    grp_oled_process_fu_106->reset(reset);
    grp_uart_wrapper_oled_do_action2_fu_128 = new uart_wrapper_oled_do_action2("grp_uart_wrapper_oled_do_action2_fu_128");
    grp_uart_wrapper_oled_do_action2_fu_128->ap_clk(clk);
    grp_uart_wrapper_oled_do_action2_fu_128->ap_rst(reset);
    grp_uart_wrapper_oled_do_action2_fu_128->s_din(grp_uart_wrapper_oled_do_action2_fu_128_s_din);
    grp_uart_wrapper_oled_do_action2_fu_128->s_full_n(s_full_n);
    grp_uart_wrapper_oled_do_action2_fu_128->s_write(grp_uart_wrapper_oled_do_action2_fu_128_s_write);
    grp_uart_wrapper_oled_do_action2_fu_128->FIFO_O_1_dout(FIFO_O_1_dout);
    grp_uart_wrapper_oled_do_action2_fu_128->FIFO_O_1_empty_n(FIFO_O_1_empty_n);
    grp_uart_wrapper_oled_do_action2_fu_128->FIFO_O_1_read(grp_uart_wrapper_oled_do_action2_fu_128_FIFO_O_1_read);
    grp_uart_wrapper_oled_do_action1_fu_164 = new uart_wrapper_oled_do_action1("grp_uart_wrapper_oled_do_action1_fu_164");
    grp_uart_wrapper_oled_do_action1_fu_164->ap_clk(clk);
    grp_uart_wrapper_oled_do_action1_fu_164->ap_rst(reset);
    grp_uart_wrapper_oled_do_action1_fu_164->e_dout(e_dout);
    grp_uart_wrapper_oled_do_action1_fu_164->e_empty_n(e_empty_n);
    grp_uart_wrapper_oled_do_action1_fu_164->e_read(grp_uart_wrapper_oled_do_action1_fu_164_e_read);
    grp_uart_wrapper_oled_do_action1_fu_164->FIFO_I_1_din(grp_uart_wrapper_oled_do_action1_fu_164_FIFO_I_1_din);
    grp_uart_wrapper_oled_do_action1_fu_164->FIFO_I_1_full_n(FIFO_I_1_full_n);
    grp_uart_wrapper_oled_do_action1_fu_164->FIFO_I_1_write(grp_uart_wrapper_oled_do_action1_fu_164_FIFO_I_1_write);
    FIFO_I_1_fifo_U = new fifo_w32_d192_A("FIFO_I_1_fifo_U");
    FIFO_I_1_fifo_U->clk(clk);
    FIFO_I_1_fifo_U->reset(reset);
    FIFO_I_1_fifo_U->if_read_ce(ap_var_for_const0);
    FIFO_I_1_fifo_U->if_write_ce(ap_var_for_const0);
    FIFO_I_1_fifo_U->if_din(grp_uart_wrapper_oled_do_action1_fu_164_FIFO_I_1_din);
    FIFO_I_1_fifo_U->if_full_n(FIFO_I_1_full_n);
    FIFO_I_1_fifo_U->if_write(grp_uart_wrapper_oled_do_action1_fu_164_FIFO_I_1_write);
    FIFO_I_1_fifo_U->if_dout(FIFO_I_1_dout);
    FIFO_I_1_fifo_U->if_empty_n(FIFO_I_1_empty_n);
    FIFO_I_1_fifo_U->if_read(grp_oled_process_fu_106_e_read);
    FIFO_O_1_fifo_U = new fifo_w32_d192_A("FIFO_O_1_fifo_U");
    FIFO_O_1_fifo_U->clk(clk);
    FIFO_O_1_fifo_U->reset(reset);
    FIFO_O_1_fifo_U->if_read_ce(ap_var_for_const0);
    FIFO_O_1_fifo_U->if_write_ce(ap_var_for_const0);
    FIFO_O_1_fifo_U->if_din(grp_oled_process_fu_106_s_f_din);
    FIFO_O_1_fifo_U->if_full_n(FIFO_O_1_full_n);
    FIFO_O_1_fifo_U->if_write(grp_oled_process_fu_106_s_f_write);
    FIFO_O_1_fifo_U->if_dout(FIFO_O_1_dout);
    FIFO_O_1_fifo_U->if_empty_n(FIFO_O_1_empty_n);
    FIFO_O_1_fifo_U->if_read(grp_uart_wrapper_oled_do_action2_fu_128_FIFO_O_1_read);

    SC_METHOD(thread_e_read);
    sensitive << ( grp_uart_wrapper_oled_do_action1_fu_164_e_read );

    SC_METHOD(thread_en);
    sensitive << ( grp_oled_process_fu_106_en );

    SC_METHOD(thread_s_din);
    sensitive << ( grp_uart_wrapper_oled_do_action2_fu_128_s_din );
    sensitive << ( grp_uart_wrapper_oled_do_action2_fu_128_s_write );

    SC_METHOD(thread_s_i);
    sensitive << ( grp_oled_process_fu_106_s );

    SC_METHOD(thread_s_write);
    sensitive << ( grp_uart_wrapper_oled_do_action2_fu_128_s_write );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "uart_wrapper_oled_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, clk, "(port)clk");
    sc_trace(mVcdFile, reset, "(port)reset");
    sc_trace(mVcdFile, e_dout, "(port)e_dout");
    sc_trace(mVcdFile, e_empty_n, "(port)e_empty_n");
    sc_trace(mVcdFile, e_read, "(port)e_read");
    sc_trace(mVcdFile, s_din, "(port)s_din");
    sc_trace(mVcdFile, s_full_n, "(port)s_full_n");
    sc_trace(mVcdFile, s_write, "(port)s_write");
    sc_trace(mVcdFile, en, "(port)en");
    sc_trace(mVcdFile, s_i, "(port)s_i");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, grp_oled_process_fu_106_en, "grp_oled_process_fu_106_en");
    sc_trace(mVcdFile, grp_oled_process_fu_106_s, "grp_oled_process_fu_106_s");
    sc_trace(mVcdFile, grp_oled_process_fu_106_e_read, "grp_oled_process_fu_106_e_read");
    sc_trace(mVcdFile, grp_oled_process_fu_106_s_f_din, "grp_oled_process_fu_106_s_f_din");
    sc_trace(mVcdFile, grp_oled_process_fu_106_s_f_write, "grp_oled_process_fu_106_s_f_write");
    sc_trace(mVcdFile, grp_uart_wrapper_oled_do_action2_fu_128_s_din, "grp_uart_wrapper_oled_do_action2_fu_128_s_din");
    sc_trace(mVcdFile, grp_uart_wrapper_oled_do_action2_fu_128_s_write, "grp_uart_wrapper_oled_do_action2_fu_128_s_write");
    sc_trace(mVcdFile, grp_uart_wrapper_oled_do_action2_fu_128_FIFO_O_1_read, "grp_uart_wrapper_oled_do_action2_fu_128_FIFO_O_1_read");
    sc_trace(mVcdFile, grp_uart_wrapper_oled_do_action1_fu_164_e_read, "grp_uart_wrapper_oled_do_action1_fu_164_e_read");
    sc_trace(mVcdFile, grp_uart_wrapper_oled_do_action1_fu_164_FIFO_I_1_din, "grp_uart_wrapper_oled_do_action1_fu_164_FIFO_I_1_din");
    sc_trace(mVcdFile, grp_uart_wrapper_oled_do_action1_fu_164_FIFO_I_1_write, "grp_uart_wrapper_oled_do_action1_fu_164_FIFO_I_1_write");
    sc_trace(mVcdFile, FIFO_O_1_dout, "FIFO_O_1_dout");
    sc_trace(mVcdFile, FIFO_O_1_empty_n, "FIFO_O_1_empty_n");
    sc_trace(mVcdFile, FIFO_I_1_full_n, "FIFO_I_1_full_n");
    sc_trace(mVcdFile, FIFO_I_1_dout, "FIFO_I_1_dout");
    sc_trace(mVcdFile, FIFO_I_1_empty_n, "FIFO_I_1_empty_n");
    sc_trace(mVcdFile, FIFO_O_1_full_n, "FIFO_O_1_full_n");
#endif

    }
    mHdltvinHandle.open("uart_wrapper_oled.hdltvin.dat");
    mHdltvoutHandle.open("uart_wrapper_oled.hdltvout.dat");
}

uart_wrapper_oled::~uart_wrapper_oled() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete grp_oled_process_fu_106;
    delete grp_uart_wrapper_oled_do_action2_fu_128;
    delete grp_uart_wrapper_oled_do_action1_fu_164;
    delete FIFO_I_1_fifo_U;
    delete FIFO_O_1_fifo_U;
}

void uart_wrapper_oled::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void uart_wrapper_oled::thread_e_read() {
    e_read = grp_uart_wrapper_oled_do_action1_fu_164_e_read.read();
}

void uart_wrapper_oled::thread_en() {
    en = grp_oled_process_fu_106_en.read();
}

void uart_wrapper_oled::thread_s_din() {
    s_din = grp_uart_wrapper_oled_do_action2_fu_128_s_din.read();
}

void uart_wrapper_oled::thread_s_i() {
    s_i = grp_oled_process_fu_106_s.read();
}

void uart_wrapper_oled::thread_s_write() {
    s_write = grp_uart_wrapper_oled_do_action2_fu_128_s_write.read();
}

void uart_wrapper_oled::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"reset\" :  \"" << reset.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"e_dout\" :  \"" << e_dout.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"e_empty_n\" :  \"" << e_empty_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"e_read\" :  \"" << e_read.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_din\" :  \"" << s_din.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_full_n\" :  \"" << s_full_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_write\" :  \"" << s_write.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"en\" :  \"" << en.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_i\" :  \"" << s_i.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

