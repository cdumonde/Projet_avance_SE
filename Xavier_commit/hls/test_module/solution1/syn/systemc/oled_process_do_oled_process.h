// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.3
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _oled_process_do_oled_process_HH_
#define _oled_process_do_oled_process_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "oled_process_faddbkb.h"
#include "oled_process_fcmpcud.h"

namespace ap_rtl {

struct oled_process_do_oled_process : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_out< sc_lv<32> > oled_process_sum;
    sc_out< sc_logic > oled_process_sum_ap_vld;
    sc_out< sc_lv<32> > oled_process_save;
    sc_out< sc_logic > oled_process_save_ap_vld;
    sc_out< sc_logic > en;
    sc_out< sc_logic > en_ap_vld;
    sc_out< sc_lv<6> > s;
    sc_out< sc_logic > s_ap_vld;
    sc_in< sc_lv<32> > e_dout;
    sc_in< sc_logic > e_empty_n;
    sc_out< sc_logic > e_read;
    sc_out< sc_lv<32> > s_f_din;
    sc_in< sc_logic > s_f_full_n;
    sc_out< sc_logic > s_f_write;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_lv<32> > ap_var_for_const1;
    sc_signal< sc_lv<5> > ap_var_for_const2;


    // Module declarations
    oled_process_do_oled_process(sc_module_name name);
    SC_HAS_PROCESS(oled_process_do_oled_process);

    ~oled_process_do_oled_process();

    sc_trace_file* mVcdFile;

    oled_process_faddbkb<1,5,32,32,32>* oled_process_faddbkb_U1;
    oled_process_fcmpcud<1,1,32,32,1>* oled_process_fcmpcud_U2;
    sc_signal< sc_logic > e_blk_n;
    sc_signal< sc_lv<8> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > exitcond_fu_187_p2;
    sc_signal< sc_logic > s_f_blk_n;
    sc_signal< sc_lv<8> > i_1_fu_193_p2;
    sc_signal< sc_lv<8> > i_1_reg_244;
    sc_signal< bool > ap_block_state3;
    sc_signal< sc_lv<32> > val_reg_249;
    sc_signal< sc_lv<32> > grp_fu_176_p2;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<32> > storemerge_reg_152;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<8> > i_reg_165;
    sc_signal< sc_lv<1> > tmp_4_fu_235_p2;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<32> > oled_process_sum_loa_1_fu_199_p1;
    sc_signal< sc_lv<8> > tmp_s_fu_203_p4;
    sc_signal< sc_lv<23> > tmp_12_fu_213_p1;
    sc_signal< sc_lv<1> > notrhs_fu_223_p2;
    sc_signal< sc_lv<1> > notlhs_fu_217_p2;
    sc_signal< sc_lv<1> > tmp_2_fu_229_p2;
    sc_signal< sc_lv<1> > tmp_3_fu_181_p2;
    sc_signal< sc_lv<8> > ap_NS_fsm;
    sc_signal< bool > ap_condition_135;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<8> ap_ST_fsm_state2;
    static const sc_lv<8> ap_ST_fsm_state3;
    static const sc_lv<8> ap_ST_fsm_state4;
    static const sc_lv<8> ap_ST_fsm_state5;
    static const sc_lv<8> ap_ST_fsm_state6;
    static const sc_lv<8> ap_ST_fsm_state7;
    static const sc_lv<8> ap_ST_fsm_state8;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<6> ap_const_lv6_35;
    static const sc_lv<6> ap_const_lv6_9;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<8> ap_const_lv8_80;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<32> ap_const_lv32_1E;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<23> ap_const_lv23_0;
    static const sc_lv<5> ap_const_lv5_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const2();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state8();
    void thread_ap_block_state3();
    void thread_ap_condition_135();
    void thread_e_blk_n();
    void thread_e_read();
    void thread_en();
    void thread_en_ap_vld();
    void thread_exitcond_fu_187_p2();
    void thread_i_1_fu_193_p2();
    void thread_notlhs_fu_217_p2();
    void thread_notrhs_fu_223_p2();
    void thread_oled_process_save();
    void thread_oled_process_save_ap_vld();
    void thread_oled_process_sum();
    void thread_oled_process_sum_ap_vld();
    void thread_oled_process_sum_loa_1_fu_199_p1();
    void thread_s();
    void thread_s_ap_vld();
    void thread_s_f_blk_n();
    void thread_s_f_din();
    void thread_s_f_write();
    void thread_tmp_12_fu_213_p1();
    void thread_tmp_2_fu_229_p2();
    void thread_tmp_4_fu_235_p2();
    void thread_tmp_s_fu_203_p4();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
