// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.3
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module oled_process_do_oled_process (
        ap_clk,
        ap_rst,
        oled_process_sum,
        oled_process_sum_ap_vld,
        oled_process_save,
        oled_process_save_ap_vld,
        en,
        en_ap_vld,
        s,
        s_ap_vld,
        e_dout,
        e_empty_n,
        e_read,
        s_f_din,
        s_f_full_n,
        s_f_write
);

parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
output  [31:0] oled_process_sum;
output   oled_process_sum_ap_vld;
output  [31:0] oled_process_save;
output   oled_process_save_ap_vld;
output   en;
output   en_ap_vld;
output  [5:0] s;
output   s_ap_vld;
input  [31:0] e_dout;
input   e_empty_n;
output   e_read;
output  [31:0] s_f_din;
input   s_f_full_n;
output   s_f_write;

reg oled_process_sum_ap_vld;
reg oled_process_save_ap_vld;
reg en;
reg en_ap_vld;
reg[5:0] s;
reg s_ap_vld;
reg e_read;
reg s_f_write;

reg    e_blk_n;
(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond_fu_187_p2;
reg    s_f_blk_n;
wire   [7:0] i_1_fu_193_p2;
reg   [7:0] i_1_reg_244;
reg    ap_block_state3;
reg   [31:0] val_reg_249;
wire   [31:0] grp_fu_176_p2;
wire    ap_CS_fsm_state8;
reg   [31:0] storemerge_reg_152;
wire    ap_CS_fsm_state2;
reg   [7:0] i_reg_165;
wire   [0:0] tmp_4_fu_235_p2;
wire    ap_CS_fsm_state4;
wire   [31:0] oled_process_sum_loa_1_fu_199_p1;
wire   [7:0] tmp_s_fu_203_p4;
wire   [22:0] tmp_12_fu_213_p1;
wire   [0:0] notrhs_fu_223_p2;
wire   [0:0] notlhs_fu_217_p2;
wire   [0:0] tmp_2_fu_229_p2;
wire   [0:0] tmp_3_fu_181_p2;
reg   [7:0] ap_NS_fsm;
reg    ap_condition_135;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd2;
end

oled_process_faddbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
oled_process_faddbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(storemerge_reg_152),
    .din1(val_reg_249),
    .ce(1'b1),
    .dout(grp_fu_176_p2)
);

oled_process_fcmpcud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
oled_process_fcmpcud_U2(
    .din0(storemerge_reg_152),
    .din1(32'd0),
    .opcode(5'd1),
    .dout(tmp_3_fu_181_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state2;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_reg_165 <= i_1_reg_244;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_165 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        storemerge_reg_152 <= grp_fu_176_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        storemerge_reg_152 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((exitcond_fu_187_p2 == 1'd0) & (1'b0 == s_f_full_n)) | ((exitcond_fu_187_p2 == 1'd0) & (1'b0 == e_empty_n))) & (1'b1 == ap_CS_fsm_state3))) begin
        i_1_reg_244 <= i_1_fu_193_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((exitcond_fu_187_p2 == 1'd0) & (1'b0 == s_f_full_n)) | ((exitcond_fu_187_p2 == 1'd0) & (1'b0 == e_empty_n))) & (exitcond_fu_187_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        val_reg_249 <= e_dout;
    end
end

always @ (*) begin
    if (((exitcond_fu_187_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        e_blk_n = e_empty_n;
    end else begin
        e_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((exitcond_fu_187_p2 == 1'd0) & (1'b0 == s_f_full_n)) | ((exitcond_fu_187_p2 == 1'd0) & (1'b0 == e_empty_n))) & (exitcond_fu_187_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        e_read = 1'b1;
    end else begin
        e_read = 1'b0;
    end
end

always @ (*) begin
    if (((~(((exitcond_fu_187_p2 == 1'd0) & (1'b0 == s_f_full_n)) | ((exitcond_fu_187_p2 == 1'd0) & (1'b0 == e_empty_n))) & (1'd1 == tmp_4_fu_235_p2) & (exitcond_fu_187_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)) | (~(((exitcond_fu_187_p2 == 1'd0) & (1'b0 == s_f_full_n)) | ((exitcond_fu_187_p2 == 1'd0) & (1'b0 == e_empty_n))) & (1'd0 == tmp_4_fu_235_p2) & (exitcond_fu_187_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)))) begin
        en = 1'd1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        en = 1'd0;
    end else begin
        en = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (~(((exitcond_fu_187_p2 == 1'd0) & (1'b0 == s_f_full_n)) | ((exitcond_fu_187_p2 == 1'd0) & (1'b0 == e_empty_n))) & (1'd1 == tmp_4_fu_235_p2) & (exitcond_fu_187_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)) | (~(((exitcond_fu_187_p2 == 1'd0) & (1'b0 == s_f_full_n)) | ((exitcond_fu_187_p2 == 1'd0) & (1'b0 == e_empty_n))) & (1'd0 == tmp_4_fu_235_p2) & (exitcond_fu_187_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)))) begin
        en_ap_vld = 1'b1;
    end else begin
        en_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        oled_process_save_ap_vld = 1'b1;
    end else begin
        oled_process_save_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~(((exitcond_fu_187_p2 == 1'd0) & (1'b0 == s_f_full_n)) | ((exitcond_fu_187_p2 == 1'd0) & (1'b0 == e_empty_n))) & (1'b1 == ap_CS_fsm_state3))) begin
        oled_process_sum_ap_vld = 1'b1;
    end else begin
        oled_process_sum_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((ap_condition_135 == 1'b1)) begin
        if ((1'd1 == tmp_4_fu_235_p2)) begin
            s = 6'd9;
        end else if ((1'd0 == tmp_4_fu_235_p2)) begin
            s = 6'd53;
        end else begin
            s = 'bx;
        end
    end else begin
        s = 'bx;
    end
end

always @ (*) begin
    if (((~(((exitcond_fu_187_p2 == 1'd0) & (1'b0 == s_f_full_n)) | ((exitcond_fu_187_p2 == 1'd0) & (1'b0 == e_empty_n))) & (1'd1 == tmp_4_fu_235_p2) & (exitcond_fu_187_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)) | (~(((exitcond_fu_187_p2 == 1'd0) & (1'b0 == s_f_full_n)) | ((exitcond_fu_187_p2 == 1'd0) & (1'b0 == e_empty_n))) & (1'd0 == tmp_4_fu_235_p2) & (exitcond_fu_187_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)))) begin
        s_ap_vld = 1'b1;
    end else begin
        s_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_187_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        s_f_blk_n = s_f_full_n;
    end else begin
        s_f_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((exitcond_fu_187_p2 == 1'd0) & (1'b0 == s_f_full_n)) | ((exitcond_fu_187_p2 == 1'd0) & (1'b0 == e_empty_n))) & (exitcond_fu_187_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        s_f_write = 1'b1;
    end else begin
        s_f_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if ((~(((exitcond_fu_187_p2 == 1'd0) & (1'b0 == s_f_full_n)) | ((exitcond_fu_187_p2 == 1'd0) & (1'b0 == e_empty_n))) & (exitcond_fu_187_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~(((exitcond_fu_187_p2 == 1'd0) & (1'b0 == s_f_full_n)) | ((exitcond_fu_187_p2 == 1'd0) & (1'b0 == e_empty_n))) & (exitcond_fu_187_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

always @ (*) begin
    ap_block_state3 = (((exitcond_fu_187_p2 == 1'd0) & (1'b0 == s_f_full_n)) | ((exitcond_fu_187_p2 == 1'd0) & (1'b0 == e_empty_n)));
end

always @ (*) begin
    ap_condition_135 = (~(((exitcond_fu_187_p2 == 1'd0) & (1'b0 == s_f_full_n)) | ((exitcond_fu_187_p2 == 1'd0) & (1'b0 == e_empty_n))) & (exitcond_fu_187_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3));
end

assign exitcond_fu_187_p2 = ((i_reg_165 == 8'd128) ? 1'b1 : 1'b0);

assign i_1_fu_193_p2 = (i_reg_165 + 8'd1);

assign notlhs_fu_217_p2 = ((tmp_s_fu_203_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs_fu_223_p2 = ((tmp_12_fu_213_p1 == 23'd0) ? 1'b1 : 1'b0);

assign oled_process_save = val_reg_249;

assign oled_process_sum = storemerge_reg_152;

assign oled_process_sum_loa_1_fu_199_p1 = storemerge_reg_152;

assign s_f_din = e_dout;

assign tmp_12_fu_213_p1 = oled_process_sum_loa_1_fu_199_p1[22:0];

assign tmp_2_fu_229_p2 = (notrhs_fu_223_p2 | notlhs_fu_217_p2);

assign tmp_4_fu_235_p2 = (tmp_3_fu_181_p2 & tmp_2_fu_229_p2);

assign tmp_s_fu_203_p4 = {{oled_process_sum_loa_1_fu_199_p1[30:23]}};

endmodule //oled_process_do_oled_process
