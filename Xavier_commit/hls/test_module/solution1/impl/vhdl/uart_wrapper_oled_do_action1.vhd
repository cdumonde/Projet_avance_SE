-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.3
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity uart_wrapper_oled_do_action1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    e_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    e_empty_n : IN STD_LOGIC;
    e_read : OUT STD_LOGIC;
    FIFO_I_1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    FIFO_I_1_full_n : IN STD_LOGIC;
    FIFO_I_1_write : OUT STD_LOGIC );
end;


architecture behav of uart_wrapper_oled_do_action1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal e_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal FIFO_I_1_blk_n : STD_LOGIC;
    signal tmp_reg_111 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_reg_116 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_reg_121 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state5 : BOOLEAN;
    signal buffer_fu_97_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state2;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (e_empty_n = ap_const_logic_1))) then
                tmp_4_reg_116 <= e_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (e_empty_n = ap_const_logic_1))) then
                tmp_6_reg_121 <= e_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (e_empty_n = ap_const_logic_1))) then
                tmp_reg_111 <= e_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (e_empty_n, FIFO_I_1_full_n, ap_CS_fsm, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (e_empty_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (e_empty_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (e_empty_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if ((not(((ap_const_logic_0 = FIFO_I_1_full_n) or (ap_const_logic_0 = e_empty_n))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;

    FIFO_I_1_blk_n_assign_proc : process(FIFO_I_1_full_n, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            FIFO_I_1_blk_n <= FIFO_I_1_full_n;
        else 
            FIFO_I_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    FIFO_I_1_din <= buffer_fu_97_p5;

    FIFO_I_1_write_assign_proc : process(e_empty_n, FIFO_I_1_full_n, ap_CS_fsm_state5)
    begin
        if ((not(((ap_const_logic_0 = FIFO_I_1_full_n) or (ap_const_logic_0 = e_empty_n))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            FIFO_I_1_write <= ap_const_logic_1;
        else 
            FIFO_I_1_write <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_block_state5_assign_proc : process(e_empty_n, FIFO_I_1_full_n)
    begin
                ap_block_state5 <= ((ap_const_logic_0 = FIFO_I_1_full_n) or (ap_const_logic_0 = e_empty_n));
    end process;

    buffer_fu_97_p5 <= (((e_dout & tmp_6_reg_121) & tmp_4_reg_116) & tmp_reg_111);

    e_blk_n_assign_proc : process(e_empty_n, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            e_blk_n <= e_empty_n;
        else 
            e_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    e_read_assign_proc : process(e_empty_n, FIFO_I_1_full_n, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((not(((ap_const_logic_0 = FIFO_I_1_full_n) or (ap_const_logic_0 = e_empty_n))) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (e_empty_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (e_empty_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (e_empty_n = ap_const_logic_1)))) then 
            e_read <= ap_const_logic_1;
        else 
            e_read <= ap_const_logic_0;
        end if; 
    end process;

end behav;
