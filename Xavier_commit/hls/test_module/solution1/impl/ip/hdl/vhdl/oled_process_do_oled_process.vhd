-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.3
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity oled_process_do_oled_process is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    oled_process_sum : OUT STD_LOGIC_VECTOR (31 downto 0);
    oled_process_sum_ap_vld : OUT STD_LOGIC;
    oled_process_save : OUT STD_LOGIC_VECTOR (31 downto 0);
    oled_process_save_ap_vld : OUT STD_LOGIC;
    en : OUT STD_LOGIC;
    en_ap_vld : OUT STD_LOGIC;
    s : OUT STD_LOGIC_VECTOR (5 downto 0);
    s_ap_vld : OUT STD_LOGIC;
    e_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    e_empty_n : IN STD_LOGIC;
    e_read : OUT STD_LOGIC;
    s_f_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    s_f_full_n : IN STD_LOGIC;
    s_f_write : OUT STD_LOGIC );
end;


architecture behav of oled_process_do_oled_process is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv6_35 : STD_LOGIC_VECTOR (5 downto 0) := "110101";
    constant ap_const_lv6_9 : STD_LOGIC_VECTOR (5 downto 0) := "001001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal e_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond_fu_187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_f_blk_n : STD_LOGIC;
    signal i_1_fu_193_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_1_reg_244 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state3 : BOOLEAN;
    signal val_reg_249 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_176_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal storemerge_reg_152 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_reg_165 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal oled_process_sum_loa_1_fu_199_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_203_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_fu_213_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_223_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_217_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_229_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_condition_135 : BOOLEAN;

    component oled_process_faddbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component oled_process_fcmpcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    oled_process_faddbkb_U1 : component oled_process_faddbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => storemerge_reg_152,
        din1 => val_reg_249,
        ce => ap_const_logic_1,
        dout => grp_fu_176_p2);

    oled_process_fcmpcud_U2 : component oled_process_fcmpcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => storemerge_reg_152,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_1,
        dout => tmp_3_fu_181_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state2;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_165_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_reg_165 <= i_1_reg_244;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                i_reg_165 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    storemerge_reg_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                storemerge_reg_152 <= grp_fu_176_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                storemerge_reg_152 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((exitcond_fu_187_p2 = ap_const_lv1_0) and (ap_const_logic_0 = s_f_full_n)) or ((exitcond_fu_187_p2 = ap_const_lv1_0) and (ap_const_logic_0 = e_empty_n)))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                i_1_reg_244 <= i_1_fu_193_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((exitcond_fu_187_p2 = ap_const_lv1_0) and (ap_const_logic_0 = s_f_full_n)) or ((exitcond_fu_187_p2 = ap_const_lv1_0) and (ap_const_logic_0 = e_empty_n)))) and (exitcond_fu_187_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                val_reg_249 <= e_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (e_empty_n, s_f_full_n, ap_CS_fsm, ap_CS_fsm_state3, exitcond_fu_187_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if ((not((((exitcond_fu_187_p2 = ap_const_lv1_0) and (ap_const_logic_0 = s_f_full_n)) or ((exitcond_fu_187_p2 = ap_const_lv1_0) and (ap_const_logic_0 = e_empty_n)))) and (exitcond_fu_187_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not((((exitcond_fu_187_p2 = ap_const_lv1_0) and (ap_const_logic_0 = s_f_full_n)) or ((exitcond_fu_187_p2 = ap_const_lv1_0) and (ap_const_logic_0 = e_empty_n)))) and (exitcond_fu_187_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_block_state3_assign_proc : process(e_empty_n, s_f_full_n, exitcond_fu_187_p2)
    begin
                ap_block_state3 <= (((exitcond_fu_187_p2 = ap_const_lv1_0) and (ap_const_logic_0 = s_f_full_n)) or ((exitcond_fu_187_p2 = ap_const_lv1_0) and (ap_const_logic_0 = e_empty_n)));
    end process;


    ap_condition_135_assign_proc : process(e_empty_n, s_f_full_n, ap_CS_fsm_state3, exitcond_fu_187_p2)
    begin
                ap_condition_135 <= (not((((exitcond_fu_187_p2 = ap_const_lv1_0) and (ap_const_logic_0 = s_f_full_n)) or ((exitcond_fu_187_p2 = ap_const_lv1_0) and (ap_const_logic_0 = e_empty_n)))) and (exitcond_fu_187_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3));
    end process;


    e_blk_n_assign_proc : process(e_empty_n, ap_CS_fsm_state3, exitcond_fu_187_p2)
    begin
        if (((exitcond_fu_187_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            e_blk_n <= e_empty_n;
        else 
            e_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    e_read_assign_proc : process(e_empty_n, s_f_full_n, ap_CS_fsm_state3, exitcond_fu_187_p2)
    begin
        if ((not((((exitcond_fu_187_p2 = ap_const_lv1_0) and (ap_const_logic_0 = s_f_full_n)) or ((exitcond_fu_187_p2 = ap_const_lv1_0) and (ap_const_logic_0 = e_empty_n)))) and (exitcond_fu_187_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            e_read <= ap_const_logic_1;
        else 
            e_read <= ap_const_logic_0;
        end if; 
    end process;


    en_assign_proc : process(e_empty_n, s_f_full_n, ap_CS_fsm_state3, exitcond_fu_187_p2, ap_CS_fsm_state2, tmp_4_fu_235_p2)
    begin
        if (((not((((exitcond_fu_187_p2 = ap_const_lv1_0) and (ap_const_logic_0 = s_f_full_n)) or ((exitcond_fu_187_p2 = ap_const_lv1_0) and (ap_const_logic_0 = e_empty_n)))) and (ap_const_lv1_1 = tmp_4_fu_235_p2) and (exitcond_fu_187_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not((((exitcond_fu_187_p2 = ap_const_lv1_0) and (ap_const_logic_0 = s_f_full_n)) or ((exitcond_fu_187_p2 = ap_const_lv1_0) and (ap_const_logic_0 = e_empty_n)))) and (ap_const_lv1_0 = tmp_4_fu_235_p2) and (exitcond_fu_187_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            en <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            en <= ap_const_logic_0;
        else 
            en <= 'X';
        end if; 
    end process;


    en_ap_vld_assign_proc : process(e_empty_n, s_f_full_n, ap_CS_fsm_state3, exitcond_fu_187_p2, ap_CS_fsm_state2, tmp_4_fu_235_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (not((((exitcond_fu_187_p2 = ap_const_lv1_0) and (ap_const_logic_0 = s_f_full_n)) or ((exitcond_fu_187_p2 = ap_const_lv1_0) and (ap_const_logic_0 = e_empty_n)))) and (ap_const_lv1_1 = tmp_4_fu_235_p2) and (exitcond_fu_187_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not((((exitcond_fu_187_p2 = ap_const_lv1_0) and (ap_const_logic_0 = s_f_full_n)) or ((exitcond_fu_187_p2 = ap_const_lv1_0) and (ap_const_logic_0 = e_empty_n)))) and (ap_const_lv1_0 = tmp_4_fu_235_p2) and (exitcond_fu_187_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            en_ap_vld <= ap_const_logic_1;
        else 
            en_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_187_p2 <= "1" when (i_reg_165 = ap_const_lv8_80) else "0";
    i_1_fu_193_p2 <= std_logic_vector(unsigned(i_reg_165) + unsigned(ap_const_lv8_1));
    notlhs_fu_217_p2 <= "0" when (tmp_s_fu_203_p4 = ap_const_lv8_FF) else "1";
    notrhs_fu_223_p2 <= "1" when (tmp_12_fu_213_p1 = ap_const_lv23_0) else "0";
    oled_process_save <= val_reg_249;

    oled_process_save_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            oled_process_save_ap_vld <= ap_const_logic_1;
        else 
            oled_process_save_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    oled_process_sum <= storemerge_reg_152;

    oled_process_sum_ap_vld_assign_proc : process(e_empty_n, s_f_full_n, ap_CS_fsm_state3, exitcond_fu_187_p2)
    begin
        if ((not((((exitcond_fu_187_p2 = ap_const_lv1_0) and (ap_const_logic_0 = s_f_full_n)) or ((exitcond_fu_187_p2 = ap_const_lv1_0) and (ap_const_logic_0 = e_empty_n)))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            oled_process_sum_ap_vld <= ap_const_logic_1;
        else 
            oled_process_sum_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    oled_process_sum_loa_1_fu_199_p1 <= storemerge_reg_152;

    s_assign_proc : process(tmp_4_fu_235_p2, ap_condition_135)
    begin
        if ((ap_condition_135 = ap_const_boolean_1)) then
            if ((ap_const_lv1_1 = tmp_4_fu_235_p2)) then 
                s <= ap_const_lv6_9;
            elsif ((ap_const_lv1_0 = tmp_4_fu_235_p2)) then 
                s <= ap_const_lv6_35;
            else 
                s <= "XXXXXX";
            end if;
        else 
            s <= "XXXXXX";
        end if; 
    end process;


    s_ap_vld_assign_proc : process(e_empty_n, s_f_full_n, ap_CS_fsm_state3, exitcond_fu_187_p2, tmp_4_fu_235_p2)
    begin
        if (((not((((exitcond_fu_187_p2 = ap_const_lv1_0) and (ap_const_logic_0 = s_f_full_n)) or ((exitcond_fu_187_p2 = ap_const_lv1_0) and (ap_const_logic_0 = e_empty_n)))) and (ap_const_lv1_1 = tmp_4_fu_235_p2) and (exitcond_fu_187_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not((((exitcond_fu_187_p2 = ap_const_lv1_0) and (ap_const_logic_0 = s_f_full_n)) or ((exitcond_fu_187_p2 = ap_const_lv1_0) and (ap_const_logic_0 = e_empty_n)))) and (ap_const_lv1_0 = tmp_4_fu_235_p2) and (exitcond_fu_187_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            s_ap_vld <= ap_const_logic_1;
        else 
            s_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    s_f_blk_n_assign_proc : process(s_f_full_n, ap_CS_fsm_state3, exitcond_fu_187_p2)
    begin
        if (((exitcond_fu_187_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            s_f_blk_n <= s_f_full_n;
        else 
            s_f_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    s_f_din <= e_dout;

    s_f_write_assign_proc : process(e_empty_n, s_f_full_n, ap_CS_fsm_state3, exitcond_fu_187_p2)
    begin
        if ((not((((exitcond_fu_187_p2 = ap_const_lv1_0) and (ap_const_logic_0 = s_f_full_n)) or ((exitcond_fu_187_p2 = ap_const_lv1_0) and (ap_const_logic_0 = e_empty_n)))) and (exitcond_fu_187_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            s_f_write <= ap_const_logic_1;
        else 
            s_f_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_12_fu_213_p1 <= oled_process_sum_loa_1_fu_199_p1(23 - 1 downto 0);
    tmp_2_fu_229_p2 <= (notrhs_fu_223_p2 or notlhs_fu_217_p2);
    tmp_4_fu_235_p2 <= (tmp_3_fu_181_p2 and tmp_2_fu_229_p2);
    tmp_s_fu_203_p4 <= oled_process_sum_loa_1_fu_199_p1(30 downto 23);
end behav;
